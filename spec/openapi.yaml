components:
  schemas:
    Action:
      properties:
        actionTypeId:
          type: string
        target:
          type: string
        targetType:
          type: string
      type: object
    ApiApplicationBaseDTO:
      properties:
        contactUserName:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        publicId:
          type: string
      type: object
    ApiApplicationCategoryDTO:
      properties:
        color:
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
      type: object
    ApiApplicationDTO:
      properties:
        applicationTags:
          items:
            $ref: '#/components/schemas/ApiApplicationTagDTO'
          type: array
        contactUserName:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        publicId:
          type: string
      type: object
    ApiApplicationEvaluationCommitDTO:
      properties:
        commitHash:
          type: string
        reportUrl:
          type: string
        scanId:
          type: string
        scanTime:
          format: date-time
          type: string
      type: object
    ApiApplicationEvaluationResultDTOV2:
      properties:
        embeddableReportHtmlUrl:
          type: string
        reason:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        status:
          type: string
      type: object
    ApiApplicationEvaluationStatusDTOV2:
      properties:
        statusUrl:
          type: string
      type: object
    ApiApplicationListDTO:
      properties:
        applications:
          items:
            $ref: '#/components/schemas/ApiApplicationDTO'
          type: array
      type: object
    ApiApplicationReportDTOV2:
      properties:
        applicationId:
          type: string
        embeddableReportHtmlUrl:
          type: string
        evaluationDate:
          format: date-time
          type: string
        latestReportHtmlUrl:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        stage:
          type: string
      type: object
    ApiApplicationTagDTO:
      properties:
        applicationId:
          type: string
        id:
          type: string
        tagId:
          type: string
      type: object
    ApiApplicationViolationDTOV2:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiEnhancedPolicyViolationDTOV2'
          type: array
      type: object
    ApiApplicationViolationListDTOV2:
      properties:
        applicationViolations:
          items:
            $ref: '#/components/schemas/ApiApplicationViolationDTOV2'
          type: array
      type: object
    ApiApplicationWaiverDTO:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationStageDTO'
          type: array
      type: object
    ApiArtifactoryConnectionDTO:
      properties:
        artifactoryConnectionId:
          type: string
        baseUrl:
          type: string
        isAnonymous:
          type: boolean
        ownerId:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
        password:
          type: string
        username:
          type: string
      type: object
    ApiArtifactoryConnectionStatusRequestDTO:
      properties:
        allowOverride:
          type: boolean
        enabled:
          type: boolean
      type: object
    ApiArtifactoryConnectionStatusResponseDTO:
      properties:
        allowChange:
          type: boolean
        allowOverride:
          type: boolean
        enabled:
          type: boolean
        inheritedFromOrgEnabled:
          type: boolean
        inheritedFromOrganizationId:
          type: string
        inheritedFromOrganizationName:
          type: string
      type: object
    ApiComponentChangeActionDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
      type: object
    ApiComponentDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        packageUrl:
          type: string
        proprietary:
          type: boolean
        sha256:
          type: string
        thirdParty:
          type: boolean
      type: object
    ApiComponentDetailsDTOV2:
      properties:
        catalogDate:
          format: date-time
          type: string
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        hygieneRating:
          nullable: true
          type: string
        integrityRating:
          nullable: true
          type: string
        licenseData:
          $ref: '#/components/schemas/ApiLicenseDataDTO'
        matchState:
          type: string
        policyData:
          $ref: '#/components/schemas/ApiComponentPolicyViolationListDTOV2'
        projectData:
          $ref: '#/components/schemas/ApiComponentProjectDataDTO'
        relativePopularity:
          format: int32
          nullable: true
          type: integer
        securityData:
          $ref: '#/components/schemas/ApiSecurityDataDTO'
      type: object
    ApiComponentDetailsRequestDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
      type: object
    ApiComponentDetailsResultDTOV2:
      properties:
        componentDetails:
          items:
            $ref: '#/components/schemas/ApiComponentDetailsDTOV2'
          type: array
      type: object
    ApiComponentEvaluationRequestDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
      type: object
    ApiComponentEvaluationResultDTOV2:
      properties:
        applicationId:
          type: string
        errorMessage:
          nullable: true
          type: string
        evaluationDate:
          format: date-time
          type: string
        isError:
          type: boolean
        results:
          items:
            $ref: '#/components/schemas/ApiComponentDetailsDTOV2'
          type: array
        submittedDate:
          format: date-time
          type: string
      type: object
    ApiComponentEvaluationTicketDTOV2:
      properties:
        applicationId:
          type: string
        resultId:
          type: string
        resultsUrl:
          type: string
        submittedDate:
          format: date-time
          type: string
      type: object
    ApiComponentIdentifierDTOV2:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
      type: object
    ApiComponentOrPurlIdentifierDTOV2:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
        packageUrl:
          type: string
      type: object
    ApiComponentPolicyViolationDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        waivedPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiWaivedPolicyViolationDTO'
          type: array
      type: object
    ApiComponentPolicyViolationListDTOV2:
      properties:
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
      type: object
    ApiComponentPolicyWaiversDTO:
      properties:
        componentPolicyWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
      type: object
    ApiComponentProjectDataDTO:
      properties:
        firstReleaseDate:
          format: date-time
          type: string
        lastReleaseDate:
          format: date-time
          type: string
        projectMetadata:
          $ref: '#/components/schemas/ApiComponentProjectMetadataDTO'
        sourceControlManagement:
          $ref: '#/components/schemas/ApiComponentProjectScmDTO'
      type: object
    ApiComponentProjectMetadataDTO:
      properties:
        description:
          type: string
        organization:
          type: string
      type: object
    ApiComponentProjectScmDTO:
      properties:
        scmDetails:
          $ref: '#/components/schemas/ApiComponentProjectScmDetailsDTO'
        scmMetadata:
          $ref: '#/components/schemas/ApiComponentProjectScmMetadataDTO'
        scmUrl:
          type: string
      type: object
    ApiComponentProjectScmDetailsDTO:
      properties:
        commitsPerMonth:
          format: int32
          type: integer
        uniqueDevsPerMonth:
          format: int32
          type: integer
      type: object
    ApiComponentProjectScmMetadataDTO:
      properties:
        forks:
          format: int32
          type: integer
        stars:
          format: int32
          type: integer
      type: object
    ApiComponentReleasedFromQuarantineDTO:
      properties:
        componentReleasedFromQuarantine:
          $ref: '#/components/schemas/ApiRepositoryComponentPolicyViolationDTO'
      type: object
    ApiComponentRemediationDTO:
      properties:
        remediation:
          $ref: '#/components/schemas/ApiComponentRemediationValueDTO'
      type: object
    ApiComponentRemediationValueDTO:
      properties:
        suggestedVersionChange:
          $ref: '#/components/schemas/ApiSuggestedVersionChangeOptionDTO'
        versionChanges:
          items:
            $ref: '#/components/schemas/ApiVersionChangeOptionDTO'
          type: array
      type: object
    ApiComponentTransitivePolicyViolationsDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        isInnerSource:
          type: boolean
        packageUrl:
          type: string
        transitivePolicyViolations:
          items:
            $ref: '#/components/schemas/ApiStagePolicyViolationComponentDTO'
          type: array
      type: object
    ApiComponentWaiversDTO:
      properties:
        applicationWaivers:
          items:
            $ref: '#/components/schemas/ApiApplicationWaiverDTO'
          type: array
        repositoryWaivers:
          items:
            $ref: '#/components/schemas/ApiRepositoryWaiverDTO'
          type: array
      type: object
    ApiComponentsInQuarantineDTO:
      properties:
        componentsInQuarantine:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentsInQuarantineDTO'
          type: array
      type: object
    ApiCompositeSourceControlDTO:
      properties:
        baseBranch:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        commitStatusEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        id:
          type: string
        ownerId:
          type: string
        provider:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        pullRequestCommentingEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        remediationPullRequestsEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        repositoryUrl:
          type: string
        sourceControlEvaluationsEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        sourceControlScanTarget:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        sshEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        statusChecksEnabled:
          $ref: '#/components/schemas/ApiCompositeValueDTOBoolean'
        token:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
        username:
          $ref: '#/components/schemas/ApiCompositeValueDTOString'
      type: object
    ApiCompositeValueDTOBoolean:
      properties:
        parentName:
          type: string
        parentValue:
          type: boolean
        value:
          type: boolean
      type: object
    ApiCompositeValueDTOString:
      properties:
        parentName:
          type: string
        parentValue:
          type: string
        value:
          type: string
      type: object
    ApiConditionFactReasonDTO:
      properties:
        reason:
          type: string
      type: object
    ApiConstraintFactDTO:
      properties:
        constraintId:
          type: string
        constraintName:
          type: string
        reasons:
          items:
            $ref: '#/components/schemas/ApiConditionFactReasonDTO'
          type: array
      type: object
    ApiConstraintViolationDTO:
      properties:
        constraintId:
          type: string
        constraintName:
          type: string
        reasons:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationReasonDTO'
          type: array
      type: object
    ApiConstraintViolationReasonDTO:
      properties:
        reason:
          type: string
        reference:
          $ref: '#/components/schemas/TriggerReference'
      type: object
    ApiCrossStageViolationDTOV2:
      properties:
        applicationName:
          type: string
        applicationPublicId:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        filename:
          type: string
        fixTime:
          format: date-time
          type: string
        hash:
          type: string
        openTime:
          format: date-time
          type: string
        organizationName:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyOwner:
          $ref: '#/components/schemas/PolicyOwner'
        policyThreatCategory:
          type: string
        policyViolationId:
          type: string
        stageData:
          additionalProperties:
            $ref: '#/components/schemas/StageData'
          type: object
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiCrowdConfigurationDTO:
      properties:
        applicationName:
          type: string
        applicationPassword:
          items:
            type: string
          type: array
        serverUrl:
          type: string
      type: object
    ApiDataRetentionPoliciesDTO:
      properties:
        applicationReports:
          $ref: '#/components/schemas/ApiReportRetentionPoliciesDTO'
        successMetrics:
          $ref: '#/components/schemas/ApiSuccessMetricsRetentionPolicyDTO'
      type: object
    ApiDependencyDataDTO:
      properties:
        directDependency:
          type: boolean
        innerSource:
          type: boolean
        innerSourceData:
          items:
            $ref: '#/components/schemas/InnerSourceData'
          type: array
          uniqueItems: true
        parentComponentPurls:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ApiDependencyTreeNodeDTO:
      properties:
        children:
          items:
            $ref: '#/components/schemas/ApiDependencyTreeNodeDTO'
          type: array
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        direct:
          type: boolean
        packageUrl:
          type: string
      type: object
    ApiDependencyTreeResponseDTO:
      properties:
        dependencyTree:
          $ref: '#/components/schemas/ApiDependencyTreeNodeDTO'
      type: object
    ApiEnhancedPolicyViolationDTOV2:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        openTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        reportId:
          type: string
        reportUrl:
          type: string
        stageId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiEvaluationResultCounterDTO:
      properties:
        critical:
          format: int32
          type: integer
        moderate:
          format: int32
          type: integer
        severe:
          format: int32
          type: integer
      type: object
    ApiFirewallMetricsResultDTO:
      properties:
        firewallMetricsValue:
          format: int32
          type: integer
        latestUpdatedTime:
          format: date-time
          type: string
      type: object
    ApiFirewallQuarantineSummaryDTO:
      properties:
        quarantineEnabled:
          type: boolean
        quarantineEnabledRepositoryCount:
          format: int64
          type: integer
        quarantinedComponentCount:
          format: int64
          type: integer
        repositoryCount:
          format: int64
          type: integer
        totalComponentCount:
          format: int64
          type: integer
      type: object
    ApiFirewallReleaseQuarantineConfigDTO:
      properties:
        autoReleaseQuarantineEnabled:
          type: boolean
        id:
          type: string
        name:
          type: string
      type: object
    ApiFirewallReleaseQuarantineSummaryDTO:
      properties:
        autoReleaseQuarantineCountMTD:
          format: int64
          type: integer
        autoReleaseQuarantineCountYTD:
          format: int64
          type: integer
      type: object
    ApiGlobalInformationDTOV2:
      properties:
        dataVersionDate:
          type: string
      type: object
    ApiHashComponentIdentifierDTO:
      properties:
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        createTime:
          format: date-time
          type: string
        hash:
          type: string
        packageUrl:
          type: string
      type: object
    ApiHashComponentIdentifiersDTO:
      properties:
        componentClaims:
          items:
            $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          type: array
      type: object
    ApiJiraConfigurationDTO:
      properties:
        customFields:
          additionalProperties:
            type: object
          type: object
        password:
          items:
            type: string
          type: array
        url:
          type: string
        username:
          type: string
      type: object
    ApiLabelDTO:
      properties:
        color:
          type: string
        description:
          type: string
        id:
          type: string
        label:
          type: string
        ownerId:
          type: string
        ownerType:
          type: string
      type: object
    ApiLicenseDTO:
      properties:
        licenseId:
          type: string
        licenseName:
          type: string
      type: object
    ApiLicenseDataDTO:
      properties:
        declaredLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        effectiveLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        observedLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        overriddenLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        status:
          type: string
      type: object
    ApiLicenseDataDTOV2:
      properties:
        declaredLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        effectiveLicenseThreats:
          items:
            $ref: '#/components/schemas/ApiLicenseThreatDTOV2'
          type: array
        effectiveLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        observedLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        overriddenLicenses:
          items:
            $ref: '#/components/schemas/ApiLicenseDTO'
          type: array
        status:
          type: string
      type: object
    ApiLicenseLegalApplicationReportDTO:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalComponentDTO'
          type: array
        licenseLegalMetadata:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalMetadataDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalComponentDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        licenseLegalData:
          $ref: '#/components/schemas/ApiLicenseLegalDataDTO'
        packageUrl:
          type: string
        stageScans:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalStageScanDTO'
          type: array
      type: object
    ApiLicenseLegalComponentReportDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiLicenseLegalComponentDTO'
        licenseLegalMetadata:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalMetadataDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalCopyrightDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContentHash:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    ApiLicenseLegalDataDTO:
      properties:
        attributions:
          items:
            $ref: '#/components/schemas/ComponentObligationAttributionDTO'
          type: array
        componentCopyrightId:
          type: string
        componentCopyrightLastUpdatedAt:
          format: date-time
          type: string
        componentCopyrightLastUpdatedByUsername:
          type: string
        componentCopyrightScopeOwnerId:
          type: string
        componentLicensesId:
          type: string
        componentLicensesLastUpdatedAt:
          format: date-time
          type: string
        componentLicensesLastUpdatedByUsername:
          type: string
        componentLicensesScopeOwnerId:
          type: string
        componentNoticesId:
          type: string
        componentNoticesLastUpdatedAt:
          format: date-time
          type: string
        componentNoticesLastUpdatedByUsername:
          type: string
        componentNoticesScopeOwnerId:
          type: string
        copyrights:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalCopyrightDTO'
          type: array
        declaredLicenses:
          items:
            type: string
          type: array
        effectiveLicenseStatus:
          type: string
        effectiveLicenses:
          items:
            type: string
          type: array
        highestEffectiveLicenseThreatGroup:
          $ref: '#/components/schemas/ApiLicenseThreatDTOV2'
        licenseFiles:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalFileDTO'
          type: array
        noticeFiles:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalFileDTO'
          type: array
        obligations:
          items:
            $ref: '#/components/schemas/ApiLicenseLegalObligationDTO'
          type: array
        observedLicenses:
          items:
            type: string
          type: array
        sourceLinks:
          items:
            $ref: '#/components/schemas/LegalSourceLinkDTO'
          type: array
          uniqueItems: true
      type: object
    ApiLicenseLegalFileDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContentHash:
          type: string
        relPath:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    ApiLicenseLegalMetadataDTO:
      properties:
        isMulti:
          type: boolean
        licenseId:
          type: string
        licenseName:
          type: string
        licenseText:
          type: string
        obligations:
          items:
            $ref: '#/components/schemas/LicenseObligationDTO'
          type: array
          uniqueItems: true
        singleLicenseIds:
          items:
            type: string
          type: array
          uniqueItems: true
        threatGroup:
          $ref: '#/components/schemas/LicenseThreatGroupDTO'
      type: object
    ApiLicenseLegalObligationDTO:
      properties:
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        lastUpdatedByUsername:
          type: string
        name:
          type: string
        ownerId:
          type: string
        packageUrl:
          type: string
        status:
          enum:
          - OPEN
          - IGNORED
          - FLAGGED
          - FULFILLED
          type: string
      type: object
    ApiLicenseLegalStageScanDTO:
      properties:
        scanDate:
          format: date-time
          type: string
        scanId:
          type: string
        stageName:
          type: string
      type: object
    ApiLicenseThreatDTOV2:
      properties:
        licenseThreatGroupCategory:
          type: string
        licenseThreatGroupLevel:
          format: int32
          type: integer
        licenseThreatGroupName:
          type: string
      type: object
    ApiLicensedSolutionDTO:
      properties:
        id:
          type: string
        url:
          type: string
      type: object
    ApiMailConfigurationDTO:
      properties:
        hostname:
          type: string
        password:
          type: string
        passwordIsIncluded:
          type: boolean
        port:
          format: int32
          type: integer
        sslEnabled:
          type: boolean
        startTlsEnabled:
          type: boolean
        systemEmail:
          type: string
        username:
          type: string
      type: object
    ApiMatchStateSummaryDTOV2:
      properties:
        knownComponentCount:
          format: int32
          type: integer
        totalComponentCount:
          format: int32
          type: integer
      type: object
    ApiMemberDTO:
      properties:
        ownerId:
          type: string
        ownerType:
          type: string
        type:
          enum:
          - USER
          - GROUP
          type: string
        userOrGroupName:
          type: string
      type: object
    ApiMetricsReportingQueryDTOV2:
      properties:
        applicationIds:
          items:
            type: string
          type: array
          uniqueItems: true
        firstTimePeriod:
          type: string
        lastTimePeriod:
          type: string
        organizationIds:
          items:
            type: string
          type: array
          uniqueItems: true
        timePeriod:
          enum:
          - WEEK
          - MONTH
          type: string
      type: object
    ApiMoveApplicationResponseDTOV2:
      properties:
        errors:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      type: object
    ApiOrganizationDTO:
      properties:
        id:
          type: string
        name:
          type: string
        parentOrganizationId:
          type: string
        tags:
          items:
            $ref: '#/components/schemas/ApiTagDTO'
          type: array
      type: object
    ApiOrganizationListDTO:
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/ApiOrganizationDTO'
          type: array
      type: object
    ApiOwnerArtifactoryConnectionDTO:
      properties:
        artifactoryConnection:
          $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
        artifactoryConnectionStatus:
          $ref: '#/components/schemas/ApiArtifactoryConnectionStatusResponseDTO'
        ownerDTO:
          $ref: '#/components/schemas/ApiOwnerDTO'
      type: object
    ApiOwnerDTO:
      properties:
        ownerId:
          type: string
        ownerName:
          type: string
        ownerPublicId:
          type: string
        ownerType:
          type: string
      type: object
    ApiPolicyDTO:
      properties:
        id:
          type: string
        name:
          type: string
        ownerId:
          type: string
        ownerType:
          enum:
          - APPLICATION
          - ORGANIZATION
          type: string
        policyType:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiPolicyListDTO:
      properties:
        policies:
          items:
            $ref: '#/components/schemas/ApiPolicyDTO'
          type: array
      type: object
    ApiPolicyViolationDTOV2:
      properties:
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiPolicyViolationDiffDTO:
      properties:
        addedViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        application:
          $ref: '#/components/schemas/ApiApplicationDTO'
        diffTime:
          format: date-time
          type: string
        fromCommit:
          $ref: '#/components/schemas/ApiApplicationEvaluationCommitDTO'
        removedViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        sameViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationForDiffDTO'
          type: array
          uniqueItems: true
        toCommit:
          $ref: '#/components/schemas/ApiApplicationEvaluationCommitDTO'
      type: object
    ApiPolicyViolationForDiffDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiComponentDTOV2'
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiPolicyViolationStageDTO:
      properties:
        componentPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiComponentPolicyViolationDTO'
          type: array
        stageId:
          type: string
      type: object
    ApiPolicyWaiverDTO:
      properties:
        associatedPackageUrl:
          type: string
        comment:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        componentName:
          type: string
        componentUpgradeAvailable:
          type: boolean
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        constraintFactsJson:
          type: string
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        expiryTime:
          format: date-time
          type: string
        hash:
          type: string
        isObsolete:
          type: boolean
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        policyWaiverId:
          type: string
        reasonText:
          type: string
        scopeOwnerId:
          type: string
        scopeOwnerName:
          type: string
        scopeOwnerType:
          type: string
        threatLevel:
          format: int32
          type: integer
        vulnerabilityId:
          type: string
      type: object
    ApiPolicyWaiverReasonDTO:
      properties:
        id:
          type: string
        reasonText:
          type: string
        type:
          type: string
      type: object
    ApiPolicyWaiversApplicableToViolationDTO:
      properties:
        activeWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
        expiredWaivers:
          items:
            $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          type: array
      type: object
    ApiPromoteScanRequestDTOV2:
      properties:
        scanId:
          type: string
        sourceStageId:
          type: string
        targetStageId:
          type: string
      type: object
    ApiProxyServerConfigurationDTO:
      properties:
        excludeHosts:
          items:
            type: string
          type: array
        hostname:
          type: string
        password:
          type: string
        passwordIsIncluded:
          type: boolean
        port:
          format: int32
          type: integer
        username:
          type: string
      type: object
    ApiPullRequestResult:
      properties:
        exceptionThrown:
          type: boolean
        reasoning:
          type: string
        startTime:
          format: date-time
          type: string
        successful:
          type: boolean
        title:
          type: string
        totalTime:
          format: int64
          type: integer
      type: object
    ApiPullRequestResults:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ApiPullRequestResult'
          type: array
      type: object
    ApiReportComponentDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        cpe:
          type: string
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        displayName:
          type: string
        hash:
          type: string
        identificationSource:
          type: string
        licenseData:
          $ref: '#/components/schemas/ApiLicenseDataDTOV2'
        matchState:
          type: string
        packageUrl:
          type: string
        pathnames:
          items:
            type: string
          type: array
        proprietary:
          type: boolean
        securityData:
          $ref: '#/components/schemas/ApiSecurityDataDTO'
        sha256:
          type: string
        swid:
          $ref: '#/components/schemas/Swid'
        thirdParty:
          type: boolean
      type: object
    ApiReportComponentPolicyViolationsDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        displayName:
          type: string
        hash:
          type: string
        matchState:
          type: string
        packageUrl:
          type: string
        pathnames:
          items:
            type: string
          type: array
        proprietary:
          type: boolean
        sha256:
          type: string
        thirdParty:
          type: boolean
        violations:
          items:
            $ref: '#/components/schemas/ApiReportPolicyViolationDTOV2'
          type: array
      type: object
    ApiReportConstraintConditionDTOV2:
      properties:
        conditionReason:
          type: string
        conditionSummary:
          type: string
      type: object
    ApiReportConstraintViolationDTOV2:
      properties:
        conditions:
          items:
            $ref: '#/components/schemas/ApiReportConstraintConditionDTOV2'
          type: array
        constraintId:
          type: string
        constraintName:
          type: string
      type: object
    ApiReportHistoryDTO:
      properties:
        applicationId:
          type: string
        reports:
          items:
            $ref: '#/components/schemas/ApiReportResultsDTO'
          type: array
      type: object
    ApiReportPolicyDataDTOV2:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        commitHash:
          type: string
        components:
          items:
            $ref: '#/components/schemas/ApiReportComponentPolicyViolationsDTOV2'
          type: array
        counts:
          additionalProperties:
            format: int32
            type: integer
          type: object
        initiator:
          type: string
        reportTime:
          format: date-time
          type: string
        reportTitle:
          type: string
      type: object
    ApiReportPolicyViolationDTOV2:
      properties:
        constraints:
          items:
            $ref: '#/components/schemas/ApiReportConstraintViolationDTOV2'
          type: array
        grandfathered:
          type: boolean
        legacyViolation:
          type: boolean
        policyId:
          type: string
        policyName:
          type: string
        policyThreatCategory:
          type: string
        policyThreatLevel:
          format: int32
          type: integer
        policyViolationId:
          type: string
        waived:
          type: boolean
      type: object
    ApiReportRawDataDTOV2:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiReportComponentDTOV2'
          type: array
        globalInformation:
          $ref: '#/components/schemas/ApiGlobalInformationDTOV2'
        matchSummary:
          $ref: '#/components/schemas/ApiMatchStateSummaryDTOV2'
      type: object
    ApiReportResultsDTO:
      properties:
        applicationId:
          type: string
        commitHash:
          type: string
        embeddableReportHtmlUrl:
          type: string
        evaluationDate:
          format: date-time
          type: string
        isForMonitoring:
          type: boolean
        isReevaluation:
          type: boolean
        latestReportHtmlUrl:
          type: string
        policyEvaluationId:
          type: string
        policyEvaluationResult:
          $ref: '#/components/schemas/PolicyEvaluationResult'
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
        scanId:
          type: string
        scanTriggerType:
          type: string
        stage:
          type: string
      type: object
    ApiReportRetentionPoliciesDTO:
      properties:
        stages:
          additionalProperties:
            $ref: '#/components/schemas/ApiReportRetentionPolicyDTO'
          type: object
      type: object
    ApiReportRetentionPolicyDTO:
      properties:
        enablePurging:
          type: boolean
        inheritPolicy:
          type: boolean
        maxAge:
          type: string
        maxCount:
          format: int32
          type: integer
      type: object
    ApiRepositoryComponentDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        packageUrl:
          type: string
        quarantineId:
          type: string
        quarantineReleaseTime:
          format: date-time
          type: string
        quarantineTime:
          format: date-time
          type: string
        sha256:
          type: string
        thirdParty:
          type: boolean
      type: object
    ApiRepositoryComponentEvaluationRequest:
      properties:
        hash:
          type: string
        packageUrl:
          type: string
        pathname:
          type: string
      type: object
    ApiRepositoryComponentEvaluationRequestList:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequest'
          type: array
        format:
          type: string
      type: object
    ApiRepositoryComponentEvaluationResult:
      properties:
        catalogDate:
          format: date-time
          type: string
        component:
          $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequest'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
        quarantineDate:
          format: date-time
          type: string
        quarantined:
          type: boolean
      type: object
    ApiRepositoryComponentEvaluationResultList:
      properties:
        repositoryId:
          type: string
        repositoryManagerId:
          type: string
        repositoryPublicId:
          type: string
        repositoryType:
          type: string
        results:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentEvaluationResult'
          type: array
      type: object
    ApiRepositoryComponentPath:
      properties:
        pathname:
          type: string
        quarantine:
          type: boolean
      type: object
    ApiRepositoryComponentPolicyViolationDTO:
      properties:
        component:
          $ref: '#/components/schemas/ApiRepositoryComponentDTO'
        policyViolations:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationDTOV2'
          type: array
        waivedPolicyViolations:
          items:
            $ref: '#/components/schemas/ApiWaivedPolicyViolationDTO'
          type: array
      type: object
    ApiRepositoryComponentsInQuarantineDTO:
      properties:
        components:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentPolicyViolationDTO'
          type: array
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
      type: object
    ApiRepositoryContainerDTO:
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    ApiRepositoryDTO:
      properties:
        auditEnabled:
          type: boolean
        format:
          type: string
        namespaceConfusionProtectionEnabled:
          type: boolean
        policyCompliantComponentSelectionEnabled:
          type: boolean
        publicId:
          type: string
        quarantineEnabled:
          type: boolean
        repositoryId:
          type: string
        type:
          type: string
      type: object
    ApiRepositoryListDTO:
      properties:
        repositories:
          items:
            $ref: '#/components/schemas/ApiRepositoryDTO'
          type: array
      type: object
    ApiRepositoryManagerDTO:
      properties:
        id:
          type: string
        instanceId:
          type: string
        name:
          type: string
        productName:
          type: string
        productVersion:
          type: string
      type: object
    ApiRepositoryManagerListDTO:
      properties:
        repositoryManagers:
          items:
            $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          type: array
      type: object
    ApiRepositoryPathResponseDTO:
      properties:
        pathVersions:
          items:
            $ref: '#/components/schemas/ApiRepositoryPathVersions'
          type: array
      type: object
    ApiRepositoryPathVersions:
      properties:
        repositoryComponentPaths:
          items:
            $ref: '#/components/schemas/ApiRepositoryComponentPath'
          type: array
        requestIndex:
          format: int32
          type: integer
      type: object
    ApiRepositoryWaiverDTO:
      properties:
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiPolicyViolationStageDTO'
          type: array
      type: object
    ApiRequestPolicyWaiverDTO:
      properties:
        addWaiverLink:
          type: string
        comment:
          type: string
        policyViolationLink:
          type: string
      type: object
    ApiReverseProxyAuthenticationConfigurationDTO:
      properties:
        csrfProtectionDisabled:
          type: boolean
        enabled:
          type: boolean
        logoutUrl:
          type: string
        usernameHeader:
          type: string
      type: object
    ApiRoleDTO:
      properties:
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ApiRoleListDTO:
      properties:
        roles:
          items:
            $ref: '#/components/schemas/ApiRoleDTO'
          type: array
      type: object
    ApiRoleMemberMappingDTO:
      properties:
        members:
          items:
            $ref: '#/components/schemas/ApiMemberDTO'
          type: array
        roleId:
          type: string
      type: object
    ApiRoleMemberMappingListDTO:
      properties:
        memberMappings:
          items:
            $ref: '#/components/schemas/ApiRoleMemberMappingDTO'
          type: array
      type: object
    ApiSamlConfigurationDTO:
      properties:
        emailAttributeName:
          type: string
        entityId:
          type: string
        firstNameAttributeName:
          type: string
        groupsAttributeName:
          type: string
        identityProviderName:
          type: string
        lastNameAttributeName:
          type: string
        usernameAttributeName:
          type: string
        validateAssertionSignature:
          type: boolean
        validateResponseSignature:
          type: boolean
      type: object
    ApiSamlConfigurationResponseDTO:
      properties:
        emailAttributeName:
          type: string
        entityId:
          type: string
        firstNameAttributeName:
          type: string
        groupsAttributeName:
          type: string
        identityProviderMetadataXml:
          type: string
        identityProviderName:
          type: string
        lastNameAttributeName:
          type: string
        usernameAttributeName:
          type: string
        validateAssertionSignature:
          type: boolean
        validateResponseSignature:
          type: boolean
      type: object
    ApiSbomStatusDTO:
      properties:
        applicationId:
          type: string
        downloadUrl:
          type: string
        errorMessage:
          type: string
        isError:
          type: boolean
        version:
          type: string
      type: object
    ApiSearchCriteriaDTOV2:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        hash:
          type: string
        packageUrl:
          type: string
        stageId:
          type: string
      type: object
    ApiSearchResultDTOV2:
      properties:
        applicationId:
          type: string
        applicationName:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        dependencyData:
          $ref: '#/components/schemas/ApiDependencyDataDTO'
        hash:
          type: string
        packageUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportUrl:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiSearchResultsDTOV2:
      properties:
        criteria:
          $ref: '#/components/schemas/ApiSearchCriteriaDTOV2'
        results:
          items:
            $ref: '#/components/schemas/ApiSearchResultDTOV2'
          type: array
      type: object
    ApiSecurityDataDTO:
      properties:
        securityIssues:
          items:
            $ref: '#/components/schemas/ApiSecurityIssueDTO'
          type: array
      type: object
    ApiSecurityIssueAnalysisDTO:
      properties:
        detail:
          type: string
        justification:
          type: string
        response:
          type: string
        state:
          type: string
      type: object
    ApiSecurityIssueDTO:
      properties:
        analysis:
          $ref: '#/components/schemas/ApiSecurityIssueAnalysisDTO'
        cvssVector:
          type: string
        cvssVectorSource:
          type: string
        cwe:
          type: string
        reference:
          type: string
        severity:
          format: float
          type: number
        source:
          type: string
        status:
          type: string
        threatCategory:
          type: string
        url:
          type: string
      type: object
    ApiSecurityVulnerabilityOverrideDTOV2:
      properties:
        comment:
          type: string
        currentlyAffectedComponents:
          items:
            $ref: '#/components/schemas/ApiComponentDTOV2'
          type: array
        hash:
          type: string
        owner:
          $ref: '#/components/schemas/ApiOwnerDTO'
        referenceId:
          type: string
        securityOverrideId:
          type: string
        status:
          type: string
      type: object
    ApiSecurityVulnerabilityOverrideResponseDTOV2:
      properties:
        securityOverrides:
          items:
            $ref: '#/components/schemas/ApiSecurityVulnerabilityOverrideDTOV2'
          type: array
      type: object
    ApiSourceControlConfigurationDTO:
      properties:
        cloneDirectory:
          type: string
        commitEmail:
          type: string
        commitUsername:
          type: string
        defaultBranchMonitoringIntervalHours:
          format: int32
          type: integer
        defaultBranchMonitoringStartTime:
          type: string
        gitExecutable:
          type: string
        gitImplementation:
          enum:
          - native
          - java
          type: string
        gitTimeoutSeconds:
          format: int32
          type: integer
        prCommentPurgeWindow:
          format: int32
          type: integer
        prEventPurgeWindow:
          format: int32
          type: integer
        pullRequestMonitoringIntervalSeconds:
          format: int32
          type: integer
        useUsernameInRepositoryCloneUrl:
          type: boolean
      type: object
    ApiSourceControlDTO:
      properties:
        baseBranch:
          type: string
        commitStatusEnabled:
          type: boolean
        enablePullRequests:
          type: boolean
        enableStatusChecks:
          type: boolean
        id:
          type: string
        ownerId:
          type: string
        provider:
          type: string
        pullRequestCommentingEnabled:
          type: boolean
        remediationPullRequestsEnabled:
          type: boolean
        repositoryUrl:
          type: string
        sourceControlEvaluationsEnabled:
          type: boolean
        sourceControlScanTarget:
          type: string
        sshEnabled:
          type: boolean
        statusChecksEnabled:
          type: boolean
        token:
          type: string
        username:
          type: string
      type: object
    ApiSourceControlEvaluationRequestDTO:
      properties:
        branchName:
          type: string
        scanTargets:
          items:
            type: string
          type: array
        stageId:
          type: string
      type: object
    ApiStagePolicyViolationComponentDTO:
      properties:
        action:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        displayName:
          type: string
        hash:
          type: string
        packageUrl:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatCategory:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiStaleApplicationEvaluationDTO:
      properties:
        application:
          $ref: '#/components/schemas/ApiApplicationBaseDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiStaleEvaluationStageDTO'
          type: array
      type: object
    ApiStaleEvaluationStageDTO:
      properties:
        lastEvaluationDate:
          format: date-time
          type: string
        stageId:
          type: string
      type: object
    ApiStaleEvaluationsDTO:
      properties:
        applications:
          items:
            $ref: '#/components/schemas/ApiStaleApplicationEvaluationDTO'
          type: array
        repositories:
          items:
            $ref: '#/components/schemas/ApiStaleRepositoryEvaluationDTO'
          type: array
      type: object
    ApiStaleRepositoryEvaluationDTO:
      properties:
        repository:
          $ref: '#/components/schemas/ApiRepositoryDTO'
        stages:
          items:
            $ref: '#/components/schemas/ApiStaleEvaluationStageDTO'
          type: array
      type: object
    ApiStaleWaiverDTO:
      properties:
        comment:
          type: string
        constraintFacts:
          items:
            $ref: '#/components/schemas/ApiConstraintFactDTO'
          type: array
        createTime:
          format: date-time
          type: string
        creatorId:
          type: string
        creatorName:
          type: string
        expiryTime:
          format: date-time
          type: string
        policyId:
          type: string
        policyName:
          type: string
        scopeOwnerId:
          type: string
        scopeOwnerName:
          type: string
        scopeOwnerType:
          type: string
        staleEvaluations:
          $ref: '#/components/schemas/ApiStaleEvaluationsDTO'
        waiverId:
          type: string
      type: object
    ApiStaleWaiversResponseDTO:
      properties:
        staleWaivers:
          items:
            $ref: '#/components/schemas/ApiStaleWaiverDTO'
          type: array
      type: object
    ApiStatusDTO:
      properties:
        code:
          format: int32
          type: integer
        message:
          type: string
      type: object
    ApiSuccessMetricsRetentionPolicyDTO:
      properties:
        enablePurging:
          type: boolean
        inheritPolicy:
          type: boolean
        maxAge:
          type: string
      type: object
    ApiSuggestedVersionChangeOptionDTO:
      properties:
        data:
          $ref: '#/components/schemas/ApiComponentChangeActionDTO'
        directDependency:
          type: boolean
        directDependencyData:
          items:
            $ref: '#/components/schemas/ApiComponentChangeActionDTO'
          type: array
        isGolden:
          type: boolean
        type:
          enum:
          - next-no-violations
          - next-non-failing
          - next-no-violations-with-dependencies
          - next-non-failing-with-dependencies
          - recommended-non-breaking
          - recommended-non-breaking-with-dependencies
          type: string
      type: object
    ApiTagDTO:
      properties:
        color:
          enum:
          - white
          - grey
          - black
          - green
          - yellow
          - orange
          - red
          - blue
          - light-red
          - light-green
          - light-blue
          - light-purple
          - dark-red
          - dark-green
          - dark-blue
          - dark-purple
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
      type: object
    ApiThirdPartyScanResultDTO:
      properties:
        componentsAffected:
          $ref: '#/components/schemas/ApiEvaluationResultCounterDTO'
        embeddableReportHtmlUrl:
          type: string
        errorMessage:
          type: string
        grandfatheredPolicyViolations:
          format: int32
          type: integer
        isError:
          type: boolean
        legacyViolations:
          format: int32
          type: integer
        openPolicyViolations:
          $ref: '#/components/schemas/ApiEvaluationResultCounterDTO'
        policyAction:
          type: string
        reportDataUrl:
          type: string
        reportHtmlUrl:
          type: string
        reportPdfUrl:
          type: string
      type: object
    ApiThirdPartyScanTicketDTO:
      properties:
        statusUrl:
          type: string
    ApiUserDTO:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
        realm:
          type: string
        username:
          type: string
      type: object
    ApiUserListDTO:
      properties:
        users:
          items:
            $ref: '#/components/schemas/ApiUserDTO'
          type: array
      type: object
    ApiUserTokenDTO:
      properties:
        passCode:
          type: string
        realm:
          type: string
        userCode:
          type: string
        username:
          type: string
      type: object
    ApiUserTokenExistsDTO:
      properties:
        userTokenExists:
          type: boolean
      type: object
    ApiVersionChangeOptionDTO:
      properties:
        data:
          $ref: '#/components/schemas/ApiComponentChangeActionDTO'
        directDependency:
          type: boolean
        directDependencyData:
          items:
            $ref: '#/components/schemas/ApiComponentChangeActionDTO'
          type: array
        type:
          enum:
          - next-no-violations
          - next-non-failing
          - next-no-violations-with-dependencies
          - next-non-failing-with-dependencies
          - recommended-non-breaking
          - recommended-non-breaking-with-dependencies
          type: string
      type: object
    ApiWaivedPolicyViolationDTO:
      properties:
        constraintViolations:
          items:
            $ref: '#/components/schemas/ApiConstraintViolationDTO'
          type: array
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        policyWaiver:
          $ref: '#/components/schemas/ApiPolicyWaiverDTO'
        threatLevel:
          format: int32
          type: integer
      type: object
    ApiWaiverOptionsDTO:
      properties:
        applyToAllComponents:
          type: boolean
        comment:
          type: string
        expiryTime:
          format: date-time
          type: string
        matcherStrategy:
          enum:
          - DEFAULT
          - EXACT_COMPONENT
          - ALL_COMPONENTS
          - ALL_VERSIONS
          type: string
        waiverReasonId:
          type: string
      type: object
    ApplicableContext:
      properties:
        children:
          items:
            $ref: '#/components/schemas/ApplicableContext'
          type: array
        id:
          type: string
        name:
          type: string
        type:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    ApplicableLabels:
      properties:
        labelsByOwner:
          items:
            $ref: '#/components/schemas/LabelsByOwner'
          type: array
      type: object
    ApplicableTagsDTO:
      properties:
        applicationCategoriesByOwner:
          items:
            $ref: '#/components/schemas/TagsByOwnerDTO'
          type: array
      type: object
    ApplicationTag:
      properties:
        applicationId:
          type: string
        id:
          type: string
        tagId:
          type: string
      type: object
    ApplicationTagsByOwnerDTO:
      properties:
        applicationTags:
          items:
            $ref: '#/components/schemas/ApplicationTag'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    AppliedTagsDTO:
      properties:
        applicationTagsByOwner:
          items:
            $ref: '#/components/schemas/ApplicationTagsByOwnerDTO'
          type: array
      type: object
    AttachmentText:
      properties:
        content:
          type: string
        contentType:
          type: string
        encoding:
          type: string
      type: object
    AttributionReportTemplateDTO:
      properties:
        documentTitle:
          type: string
        footer:
          type: string
        header:
          type: string
        id:
          type: string
        includeAppendix:
          type: boolean
        includeInnerSource:
          type: boolean
        includeSonatypeSpecialLicenses:
          type: boolean
        includeStandardLicenseTexts:
          type: boolean
        includeTableOfContents:
          type: boolean
        lastUpdatedAt:
          format: date-time
          type: string
        templateName:
          type: string
      type: object
    BodyPart:
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          properties:
            parameters:
              additionalProperties:
                type: string
              type: object
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
          type: object
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
      type: object
    ComponentDisplayName:
      properties:
        name:
          type: string
        parts:
          items:
            $ref: '#/components/schemas/ComponentDisplayNamePart'
          type: array
      type: object
    ComponentDisplayNamePart:
      properties:
        field:
          type: string
        value:
          type: string
      type: object
    ComponentFact:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        constraintFacts:
          items:
            $ref: '#/components/schemas/ConstraintFact'
          type: array
        displayName:
          $ref: '#/components/schemas/ComponentDisplayName'
        hash:
          type: string
        pathnames:
          items:
            type: string
          type: array
      type: object
    ComponentIdentifier:
      properties:
        coordinates:
          additionalProperties:
            type: string
          type: object
        format:
          type: string
      type: object
    ComponentObligationAttributionDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        content:
          type: string
        id:
          type: string
        lastUpdatedAt:
          format: date-time
          type: string
        lastUpdatedByUsername:
          type: string
        obligationName:
          type: string
        ownerId:
          type: string
        packageUrl:
          type: string
      type: object
    ConditionFact:
      properties:
        conditionIndex:
          format: int32
          type: integer
        conditionTypeId:
          type: string
        reason:
          type: string
        reference:
          $ref: '#/components/schemas/TriggerReference'
        summary:
          type: string
        triggerJson:
          type: string
      type: object
    ConfigurationValidationResult:
      properties:
        configurationComplete:
          $ref: '#/components/schemas/ValidationResult'
        repoPrivate:
          $ref: '#/components/schemas/ValidationResult'
        sshConfiguration:
          $ref: '#/components/schemas/ValidationResult'
        tokenPermissions:
          $ref: '#/components/schemas/ValidationResult'
      type: object
    ConstraintFact:
      properties:
        conditionFacts:
          items:
            $ref: '#/components/schemas/ConditionFact'
          type: array
        constraintId:
          type: string
        constraintName:
          type: string
        operatorName:
          type: string
      type: object
    ContentDisposition:
      properties:
        creationDate:
          format: date-time
          type: string
        fileName:
          type: string
        modificationDate:
          format: date-time
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
        type:
          type: string
      type: object
    CweId:
      properties:
        id:
          type: string
        uri:
          format: uri
          type: string
      type: object
    FormDataBodyPart:
      properties:
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        formDataContentDisposition:
          $ref: '#/components/schemas/FormDataContentDisposition'
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          properties:
            parameters:
              additionalProperties:
                type: string
              type: object
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
          type: object
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        name:
          type: string
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
        simple:
          type: boolean
        value:
          type: string
      type: object
    FormDataContentDisposition:
      properties:
        creationDate:
          format: date-time
          type: string
        fileName:
          type: string
        modificationDate:
          format: date-time
          type: string
        name:
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
        readDate:
          format: date-time
          type: string
        size:
          format: int64
          type: integer
        type:
          type: string
      type: object
    FormDataMultiPart:
      properties:
        bodyParts:
          items:
            $ref: '#/components/schemas/BodyPart'
          type: array
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        fields:
          additionalProperties:
            items:
              $ref: '#/components/schemas/FormDataBodyPart'
            type: array
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          properties:
            parameters:
              additionalProperties:
                type: string
              type: object
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
          type: object
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
      type: object
    GroupingByDTO:
      properties:
        additionalInfo:
          type: string
        groupBy:
          type: string
        groupIdentifier:
          enum:
          - itemType
          - organizationId
          - organizationName
          - applicationId
          - applicationName
          - applicationPublicId
          - policyEvaluationStage
          - applicationVersion
          - reportId
          - componentHash
          - componentFormat
          - componentName
          - componentCoordinate
          - vulnerabilityId
          - vulnerabilitySeverity
          - vulnerabilityStatus
          - vulnerabilityDescription
          - applicationCategoryId
          - applicationCategoryName
          - applicationCategoryColor
          - applicationCategoryDescription
          - componentLabelId
          - componentLabelName
          - componentLabelColor
          - componentLabelDescription
          - policyId
          - policyName
          - policyThreatCategory
          - policyThreatLevel
          - parentOrganizationName
          - parentOrganizationId
          - sbomSpecification
          type: string
        searchResultItemDTOS:
          items:
            $ref: '#/components/schemas/SearchResultItemDTO'
          type: array
      type: object
    IdeUsersOverviewDTO:
      properties:
        userCount:
          format: int64
          type: integer
      type: object
    InnerSourceData:
      properties:
        innerSourceComponentPurl:
          type: string
        ownerApplicationId:
          type: string
        ownerApplicationName:
          type: string
      type: object
    JsonNode:
      type: object
    LabelsByOwner:
      properties:
        labels:
          items:
            $ref: '#/components/schemas/ApiLabelDTO'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    LegalSourceLinkDTO:
      properties:
        content:
          type: string
        id:
          type: string
        originalContent:
          type: string
        status:
          enum:
          - enabled
          - disabled
          type: string
      type: object
    License:
      properties:
        licenseId:
          type: string
        licenseName:
          type: string
      type: object
    LicenseObligationDTO:
      properties:
        name:
          type: string
        obligationTexts:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    LicenseThreatGroupDTO:
      properties:
        name:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    MessageBodyWorkers:
      type: object
    MultiPart:
      properties:
        bodyParts:
          items:
            $ref: '#/components/schemas/BodyPart'
          type: array
        contentDisposition:
          $ref: '#/components/schemas/ContentDisposition'
        entity:
          type: object
        headers:
          additionalProperties:
            items:
              type: string
            type: array
          type: object
        mediaType:
          properties:
            parameters:
              additionalProperties:
                type: string
              type: object
            subtype:
              type: string
            type:
              type: string
            wildcardSubtype:
              type: boolean
            wildcardType:
              type: boolean
          type: object
        messageBodyWorkers:
          $ref: '#/components/schemas/MessageBodyWorkers'
        parameterizedHeaders:
          additionalProperties:
            items:
              $ref: '#/components/schemas/ParameterizedHeader'
            type: array
          type: object
        parent:
          $ref: '#/components/schemas/MultiPart'
        providers:
          type: object
      type: object
    ParameterizedHeader:
      properties:
        parameters:
          additionalProperties:
            type: string
          type: object
        value:
          type: string
      type: object
    PolicyAlert:
      properties:
        actions:
          items:
            $ref: '#/components/schemas/Action'
          type: array
        trigger:
          $ref: '#/components/schemas/PolicyFact'
      type: object
    PolicyEvaluationResult:
      properties:
        affectedComponentCount:
          format: int32
          type: integer
        alerts:
          items:
            $ref: '#/components/schemas/PolicyAlert'
          type: array
        criticalComponentCount:
          format: int32
          type: integer
        criticalPolicyViolationCount:
          format: int32
          type: integer
        criticalSastPolicyViolationCount:
          format: int32
          type: integer
        grandfatheredPolicyViolationCount:
          format: int32
          type: integer
        legacyViolationCount:
          format: int32
          type: integer
        moderateComponentCount:
          format: int32
          type: integer
        moderatePolicyViolationCount:
          format: int32
          type: integer
        moderateSastPolicyViolationCount:
          format: int32
          type: integer
        sastAlerts:
          items:
            $ref: '#/components/schemas/PolicyAlert'
          type: array
        severeComponentCount:
          format: int32
          type: integer
        severePolicyViolationCount:
          format: int32
          type: integer
        severeSastPolicyViolationCount:
          format: int32
          type: integer
        totalComponentCount:
          format: int32
          type: integer
        totalSastFindingCount:
          format: int32
          type: integer
      type: object
    PolicyFact:
      properties:
        componentFacts:
          items:
            $ref: '#/components/schemas/ComponentFact'
          type: array
        policyId:
          type: string
        policyName:
          type: string
        policyViolationId:
          type: string
        threatLevel:
          format: int32
          type: integer
      type: object
    PolicyOwner:
      properties:
        ownerId:
          type: string
        ownerName:
          type: string
        ownerPublicId:
          type: string
        ownerType:
          type: string
      type: object
    PolicyTag:
      properties:
        id:
          type: string
        policyId:
          type: string
        tagId:
          type: string
      type: object
    ReferenceLink:
      properties:
        referenceType:
          type: string
        url:
          type: string
      type: object
    RootCause:
      properties:
        listOfPaths:
          items:
            type: string
          type: array
        versionRange:
          type: string
      type: object
    SBOMVulnerabilityAnalysisRequest:
      properties:
        componentLocator:
          $ref: '#/components/schemas/componentLocator'
        vulnerabilityAnalysis:
          $ref: '#/components/schemas/vulnerabilityAnalysis'
      required:
      - componentLocator
      - vulnerabilityAnalysis
      type: object
    SbomComponentDTO:
      properties:
        componentIdentifier:
          $ref: '#/components/schemas/ComponentIdentifier'
        dependencyType:
          type: string
        displayName:
          type: string
        hash:
          type: string
        licenses:
          items:
            $ref: '#/components/schemas/License'
          type: array
          uniqueItems: true
        name:
          type: string
        packageUrl:
          type: string
        percentageAnnotated:
          format: double
          type: number
        version:
          type: string
        vulnerabilitySeverityCriticalCount:
          format: int32
          type: integer
        vulnerabilitySeverityHighCount:
          format: int32
          type: integer
        vulnerabilitySeverityLowCount:
          format: int32
          type: integer
        vulnerabilitySeverityMediumCount:
          format: int32
          type: integer
        vulnerabilitySeverityNoneCount:
          format: int32
          type: integer
      type: object
    SbomComponentListDTO:
      properties:
        results:
          items:
            $ref: '#/components/schemas/SbomComponentDTO'
          type: array
        totalResultsCount:
          format: int32
          type: integer
      type: object
    SearchResultDTO:
      properties:
        groupingByDTOS:
          items:
            $ref: '#/components/schemas/GroupingByDTO'
          type: array
        isExactTotalNumberOfHits:
          type: boolean
        page:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        searchQuery:
          type: string
        totalNumberOfHits:
          format: int32
          type: integer
      type: object
    SearchResultItemDTO:
      properties:
        applicationCategoryColor:
          type: string
        applicationCategoryDescription:
          type: string
        applicationCategoryId:
          type: string
        applicationCategoryName:
          type: string
        applicationId:
          type: string
        applicationName:
          type: string
        applicationPublicId:
          type: string
        applicationVersion:
          type: string
        componentHash:
          type: string
        componentIdentifier:
          $ref: '#/components/schemas/ApiComponentIdentifierDTOV2'
        componentLabelColor:
          type: string
        componentLabelDescription:
          type: string
        componentLabelId:
          type: string
        componentLabelName:
          type: string
        componentName:
          type: string
        itemType:
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        policyEvaluationStage:
          type: string
        policyId:
          type: string
        policyName:
          type: string
        policyThreatCategory:
          type: string
        policyThreatLevel:
          format: int32
          type: integer
        reportId:
          type: string
        resultIndex:
          format: int32
          type: integer
        sbomSpecification:
          type: string
        vulnerabilityDescription:
          type: string
        vulnerabilityId:
          type: string
        vulnerabilityStatus:
          type: string
      type: object
    SecurityVulnerabilityCustomData:
      properties:
        cvssSeverity:
          format: float
          type: number
        cvssVector:
          type: string
        cweId:
          type: string
        remediation:
          type: string
      type: object
    SecurityVulnerabilityData:
      properties:
        advisories:
          items:
            $ref: '#/components/schemas/ReferenceLink'
          type: array
        categories:
          items:
            type: string
          type: array
        componentDetectionMarkdown:
          type: string
        componentExplanationMarkdown:
          type: string
        componentRecommendationMarkdown:
          type: string
        customData:
          $ref: '#/components/schemas/SecurityVulnerabilityCustomData'
        description:
          type: string
        detectionMarkdown:
          type: string
        detectionType:
          type: string
        explanationMarkdown:
          type: string
        identifier:
          type: string
        isAdvancedVulnerabilityDetection:
          type: boolean
        mainSeverity:
          $ref: '#/components/schemas/SecurityVulnerabilitySeverity'
        recommendationMarkdown:
          type: string
        researchType:
          enum:
          - FAST_TRACK
          - DEEP_DIVE
          type: string
        rootCauses:
          items:
            $ref: '#/components/schemas/RootCause'
          type: array
        severityScores:
          items:
            $ref: '#/components/schemas/SecurityVulnerabilitySeverity'
          type: array
        source:
          $ref: '#/components/schemas/VulnerabilitySource'
        vulnIds:
          items:
            type: string
          type: array
        vulnerabilityLink:
          format: uri
          type: string
        vulnerableVersionRanges:
          items:
            type: string
          type: array
        weakness:
          $ref: '#/components/schemas/SecurityVulnerabilityWeakness'
      type: object
    SecurityVulnerabilitySeverity:
      properties:
        score:
          format: float
          type: number
        source:
          type: string
        sourceLabel:
          type: string
        vector:
          type: string
      type: object
    SecurityVulnerabilityWeakness:
      properties:
        cweIds:
          items:
            $ref: '#/components/schemas/CweId'
          type: array
        cweSource:
          type: string
      type: object
    StageData:
      properties:
        actionTypeId:
          type: string
        mostRecentEvaluationTime:
          format: date-time
          type: string
        mostRecentScanId:
          type: string
      type: object
    Swid:
      properties:
        name:
          type: string
        patch:
          type: boolean
        tagId:
          type: string
        tagVersion:
          format: int32
          type: integer
        text:
          $ref: '#/components/schemas/AttachmentText'
        version:
          type: string
      type: object
    SystemConfig:
      properties:
        baseUrl:
          nullable: true
          type: string
        forceBaseUrl:
          nullable: true
          type: boolean
    SystemConfigProperty:
      enum:
      - baseUrl
      - forceBaseUrl
      type: string
    TagsByOwnerDTO:
      properties:
        applicationCategories:
          items:
            $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          type: array
        ownerId:
          type: string
        ownerName:
          type: string
        ownerType:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      type: object
    ThirdPartySbomMetadataSummaryDTO:
      properties:
        applicationVersion:
          type: string
        critical:
          format: int32
          type: integer
        high:
          format: int32
          type: integer
        importDate:
          format: date-time
          type: string
        low:
          format: int32
          type: integer
        medium:
          format: int32
          type: integer
        none:
          format: int32
          type: integer
        spec:
          type: string
        specVersion:
          type: string
      type: object
    ThirdPartySbomMetadataSummaryListDTO:
      properties:
        results:
          items:
            $ref: '#/components/schemas/ThirdPartySbomMetadataSummaryDTO'
          type: array
        totalResultsCount:
          format: int32
          type: integer
      type: object
    TriggerReference:
      properties:
        type:
          enum:
          - SECURITY_VULNERABILITY_REFID
          - SAST_FINDING_ID
          type: string
        value:
          type: string
      type: object
    ValidationResult:
      properties:
        message:
          type: string
        valid:
          type: boolean
      type: object
    VulnerabilitySource:
      properties:
        longName:
          type: string
        shortName:
          type: string
      type: object
    componentLocator:
      description: Component details about the vulnerable component. Either hash or
        package URL must be provided
      properties:
        hash:
          description: Component hash
          type: string
        packageUrl:
          description: Component package URL
          type: string
      type: object
    vulnerabilityAnalysis:
      description: Vulnerability analysis details.
      properties:
        createdOn:
          format: date-time
          readOnly: true
          type: string
        detail:
          description: Detailed description of the impact including methods used during
            assessment
          type: string
        justification:
          description: The rationale of why the impact analysis state was asserted
          enum:
          - code_not_present
          - code_not_reachable
          - requires_configuration
          - requires_dependency
          - requires_environment
          - protected_by_compiler
          - protected_at_runtime
          - protected_at_perimeter
          - protected_by_mitigating_control
          type: string
        lastUpdatedBy:
          readOnly: true
          type: string
        lastUpdatedOn:
          format: date-time
          readOnly: true
          type: string
        response:
          description: Vulnerability analysis response by an author, supplier or manufacturer
            for the affected component.
          enum:
          - can_not_fix
          - will_not_fix
          - update
          - rollback
          - workaround_available
          type: string
        state:
          description: Vulnerability analysis state.
          enum:
          - resolved
          - resolved_with_pedigree
          - exploitable
          - in_triage
          - false_positive
          - not_affected
          type: string
      required:
      - detail
      - justification
      - response
      - state
      type: object
  securitySchemes:
    BasicAuth:
      scheme: basic
      type: http
info:
  title: Sonatype Lifecycle Public REST API
  version: 1.182.0-01
openapi: 3.0.1
paths:
  /api/v2/applicationCategories/application:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories.
      operationId: getTagsUsedByApplications
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: A list of application categories or tags applied to applications.
            Each application category or tag consists of an id, name, description
            and color.
      tags:
      - Application Categories
  /api/v2/applicationCategories/application/{applicationPublicId}:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories available to applications in this organization.
      operationId: getApplicationApplicableTags
      parameters:
      - description: 'The application public ID '
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableTagsDTO'
          description: 'A list of application categories that can be applied to the
            specified application. Each application category or tag consists of an
            id, name, description and color. '
      tags:
      - Application Categories
  /api/v2/applicationCategories/application/{applicationPublicId}/applicable:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getApplicableTagsByApplicationPublicId
      parameters:
      - description: Provide the application public ID assigned by IQ Server.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: Returns all application categories or tags that can be applied
            to this application,  by providing the application public ID.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories in use by applications in this organization.
      operationId: getTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationCategoryDTO'
                type: array
          description: 'A list of application categories or tags that can be used
            by applications in this organization. Each application category consists
            of an id, name, description and color. '
      tags:
      - Application Categories
    post:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to add a new application category
        or tag.
      operationId: addTag
      parameters:
      - description: The organizationId assigned by IQ Server, for which you want
          to create the application category.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationCategoryDTO'
        description: Specify the the name, description and color for the new application
          category to be  created. The application category id is not required to
          create a new application category  and should not be included.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          description: Successful creation of the new application category and its
            details.
      tags:
      - Application Categories
    put:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to update an existing application
        category.
      operationId: updateTag
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationCategoryDTO'
        description: Specify the id (application category id) and id of the organization
          that owns this  application category, to update the name, description and
          color.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationCategoryDTO'
          description: Successful update echoing the updated application category
            details.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/applicable:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getApplicableTags
      parameters:
      - description: The organizationId assigned by IQ Server, for which you want
          to retrieve the applicable tags or application categories.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableTagsDTO'
          description: 'A list of application categories or tags that can be applied
            to applications in this organization. Each application category or tag
            consists of an id, name, description and color. '
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/applied:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that can be applied to applications in this organization.
      operationId: getAppliedTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppliedTagsDTO'
          description: Get all application categories or tags that can be applied
            to an application, belonging to the organization specified by the organization
            id.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/policy:
    get:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to retrieve a list of application
        categories that are applied to applications in this organization.
      operationId: getAppliedPolicyTags
      parameters:
      - description: The organizationId assigned by IQ Server.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PolicyTag'
                type: array
          description: Get all policy application categories or tags that are applied
            to applications  in this organization.
      tags:
      - Application Categories
  /api/v2/applicationCategories/organization/{organizationId}/{tagId}:
    delete:
      description: Grouping applications with similar characteristics into categories
        makes policy management easier. You can then create a policy that applies
        to a specific category. Use this method to update an existing application
        category.Use this method to delete an existing application category.
      operationId: deleteTag
      parameters:
      - description: The organizationId assigned by IQ Server, corresponding to the
          application category tag you want to delete.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: The application category ID assigned by IQ Server, to be deleted.
        in: path
        name: tagId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Successful deletion of the application category.
      tags:
      - Application Categories
  /api/v2/applications:
    get:
      operationId: getApplications
      parameters:
      - in: query
        name: publicId
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - in: query
        name: includeCategories
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationListDTO'
          description: default response
      tags:
      - Applications
    post:
      operationId: addApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: default response
      tags:
      - Applications
  /api/v2/applications/organization/{organizationId}:
    get:
      operationId: getApplicationsByOrganizationId
      parameters:
      - in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationListDTO'
          description: default response
      tags:
      - Applications
  /api/v2/applications/{applicationId}:
    delete:
      operationId: deleteApplication
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Applications
    get:
      operationId: getApplication
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: default response
      tags:
      - Applications
    put:
      operationId: updateApplication
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiApplicationDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: default response
      tags:
      - Applications
  /api/v2/applications/{applicationId}/move/organization/{organizationId}:
    post:
      operationId: moveApplication
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMoveApplicationResponseDTOV2'
          description: default response
      tags:
      - Applications
  /api/v2/applications/{applicationPublicId}/reports/policyViolations/diff:
    get:
      description: 'By configuring Lifecycle with SCM, policy evaluations can be linked
        to the Git commit hash. Use this method to compare the violations between
        policy evaluations for 2 commits, by providing the linked commit hashes.


        Permissions required: View IQ Elements'
      operationId: getPolicyViolationDiff
      parameters:
      - description: Enter the applicationPublicId, created at the time of creating
          the application
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the commit hash linked to the earlier policy evaluation.
        in: query
        name: fromCommit
        required: true
        schema:
          type: string
      - description: Enter the commit hash linked to the other (later) policy evaluation
          to compare.
        in: query
        name: toCommit
        required: true
        schema:
          type: string
      - description: Enter the policy evaluation Id linked to the earlier policy evaluation
          to compare
        in: query
        name: fromPolicyEvaluationId
        schema:
          type: string
      - description: Enter the policy evaluation Id linked to the other (later) policy
          evaluation to compare
        in: query
        name: toPolicyEvaluationId
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyViolationDiffDTO'
          description: The response contains the violation details grouped under addedViolations,
            sameViolations and removedViolations for the two policy evaluations being
            compared.
        '400':
          description: Missing or invalid parameter. Check if the policy evaluations
            are still available, based on the Data Retention Policies.
        '404':
          description: Policy violation diff could not be determined for the given
            request.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}:
    get:
      description: This is an older version of the endpoint. This call will now be
        redirected to /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw
        (see below)
      operationId: getData
      parameters:
      - description: Enter the applicationPublicId for the evaluated application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: 'Enter the scanId (reportId) of the application report created
          after the evaluation. '
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/dependencyTree:
    get:
      description: 'Use this method to retrieve the dependencies related to the component
        identified at the time of application evaluation. This is currently available
        only for Java (Maven) and NPM applications.


        Permissions required: View IQ Elements'
      operationId: getDependencyTree
      parameters:
      - description: Enter the applicationPublicId created at the time of creating
          the application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: ' Enter the reportId (scanId) created at the time of evaluating
          the application.'
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDependencyTreeResponseDTO'
          description: The response fields contain the 'Dependency Tree' data  under
            the 'children' section. The 'children' section may contain more tree nodes.
            Every direct dependency can have zero or more transitive dependencies.
            Each tree node contains the packageUrl, component identifier and a dependency
            tree node (if it exists.) The component identifier section contains the
            format and coordinates for the component.
        '400':
          description: Missing or invalid parameter.
        '404':
          description: The requested dependency tree was not found.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/policy:
    get:
      description: 'Use this method to retrieve the policy violation data generated
        as a result of an application evaluation, for each component identified in
        the application evaluation./n/nPermissions required: View IQ Elements'
      operationId: getPolicyViolations_1
      parameters:
      - description: Enter the applicationPublicId created at the time of creating
          the application.
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the reportId (scanId) created at the time of evaluating
          the application.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportPolicyDataDTOV2'
          description: The response fields contain the policy violation data for the
            reportId (scanId) specified in the method call. The fields corresponding
            to 'violations' include the violation details for each policy, for the
            component.
      tags:
      - Application Report Data
  /api/v2/applications/{applicationPublicId}/reports/{scanId}/raw:
    get:
      description: 'Use this method to retrieve the ''raw'' data generated as a result
        of an application evaluation. ''raw'' data includes: the components identified
        in the application, and the licenses and vulnerabilities associated with the
        identified components./n/nPermissions required: View IQ Elements'
      operationId: getRawData
      parameters:
      - description: 'Enter the applicationPublicId (assigned at the time of creating
          a new application.) '
        in: path
        name: applicationPublicId
        required: true
        schema:
          type: string
      - description: Enter the reportId (scanId) created at the time of evaluating
          the application. application.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportRawDataDTOV2'
          description: The response fields contain the 'raw' data for the reportId
            (scanId) specified in the method call. The fields corresponding to 'dependencyData'
            will indicate if the component is a direct dependency (true/false), an
            InnerSource component(true/false), the associated parentComponentPurls
            (package URLs of the parent component ownerApplicationName (name of the
            owner application), ownerApplicatonId (internal ID of the owner application,
            innerSourceComponentPurl (the package URL of the InnerSourceComponent.)
      tags:
      - Application Report Data
  /api/v2/applications/{sourceApplicationId}/clone:
    post:
      operationId: cloneApplication
      parameters:
      - in: path
        name: sourceApplicationId
        required: true
        schema:
          type: string
      - in: query
        name: clonedApplicationName
        schema:
          type: string
      - in: query
        name: clonedApplicationPublicId
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationDTO'
          description: default response
      tags:
      - Applications
  /api/v2/auditLogs:
    get:
      operationId: getAuditLogs
      parameters:
      - in: query
        name: startUtcDate
        schema:
          type: string
      - in: query
        name: endUtcDate
        schema:
          type: string
      responses:
        default:
          content:
            text/plain: {}
          description: default response
      tags:
      - Audit Logs
  /api/v2/claim/components:
    get:
      operationId: getAll
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifiersDTO'
          description: default response
      tags:
      - Claim
    post:
      operationId: set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          description: default response
      tags:
      - Claim
  /api/v2/claim/components/{hash}:
    delete:
      operationId: delete
      parameters:
      - in: path
        name: hash
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Claim
    get:
      operationId: get
      parameters:
      - in: path
        name: hash
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiHashComponentIdentifierDTO'
          description: default response
      tags:
      - Claim
  /api/v2/components/details:
    post:
      description: Use this method to retrieve data related to a component.
      operationId: getComponentDetails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentDetailsRequestDTOV2'
        description: 'You can retrieve component data in any one of the 3 ways via:

          1. Component identifier

          2. Package URL

          3. Hash'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentDetailsResultDTOV2'
          description: The response contains a detailed description of the component.
            The hash value returned here is truncated and not intended to be used
            as a checksum. It can be used as an identifier to pass to other REST API
            calls.
      tags:
      - Components
  /api/v2/components/remediation/{ownerType}/{ownerId}:
    post:
      description: Use this method to obtain remediation suggestions for policy violations
        on a component basis. Remediations obtained from this method are same as those
        appearing on the Component Details Page in the UI.
      operationId: getSuggestedRemediationForComponent
      parameters:
      - description: 'Possible values: application, organization, repository. '
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository
          type: string
      - description: 'Possible values: applicationId, organizationId or repositoryId.'
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the stageId to obtain next-non-failing and next-non-failing-with-dependencies
          remediation types in the response. Possible values are develop, build, stage-release,
          release and operate.
        in: query
        name: stageId
        schema:
          type: string
      - description: Enter the identification source if you want the remediation result
          based on third-party scan information (non-Sonatype). The identification
          source can be obtained from the Component Details Page in the UI.
        in: query
        name: identificationSource
        schema:
          type: string
      - description: Enter the scanId (reportId) if you want the remediation result
          based on third-party scan information (non-Sonatype).
        in: query
        name: scanId
        schema:
          type: string
      - description: Enter true if you want to include parent remediation for transitive
          dependency in the response based on your application policy scan.
        in: query
        name: includeParentRemediation
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentDTOV2'
      responses:
        '200':
          description: 'The response returns details for components that can be used
            for remediation. Details for the recommended component are grouped under
            type in the response.<ul><li>Type <i>next-no-violations</i> indicates
            that the component version has no violations.</li><li>Type <i>next-non-failing</i>
            indicates that the component version does not fail policy violations.
            The response will contain this type only if stageId is provided in the
            method call.</li><li>Type <i>next-no-violations-with-dependencies</i>
            indicates that the component, along-with its dependencies does not any
            violate any policies.</li><li>Type <i>next-non-failing-with-dependencies</i>
            indicates that the component and its dependencies will not fail a build
            for the stageId provided.</li></ul><p>Hash values returned here are truncated
            and are not intended to be used as checksums. They can be used as identifiers
            to pass to other REST API calls. '
      tags:
      - Components
  /api/v2/components/versions:
    post:
      description: Use this method to retrieve all known versions of a component.
      operationId: getComponentVersions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentOrPurlIdentifierDTOV2'
        description: 'Possible values: Component identifier or packageURL (pURL) identifier
          in the correct format. Use a-name for JavaScript components.'
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Known versions of the component are returned in a string array
            of ascending order.
      tags:
      - Components
  /api/v2/components/{componentHash}/labels/{labelName}/{ownerType}s/{internalOwnerId}:
    delete:
      description: Use this method to un-assign a label from a component.
      operationId: deleteComponentLabel
      parameters:
      - description: 'Possible values: application or organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - description: 'Possible values : applicationId or organizationId'
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the SHA1 hash of the component.
        in: path
        name: componentHash
        required: true
        schema:
          type: string
      - description: Enter the label name to un-assign from this component.
        in: path
        name: labelName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Label un-assigned from component successfully.
      tags:
      - Components
    post:
      description: Use this method to assign an existing label to a component.
      operationId: setComponentLabel
      parameters:
      - description: 'Possible values: application or organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - description: 'Possible values : applicationId or organizationId'
        in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - description: Enter the SHA1 hash of the component.
        in: path
        name: componentHash
        required: true
        schema:
          type: string
      - description: Enter the label name to assign to this component.
        in: path
        name: labelName
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Component label assigned successfully.
      tags:
      - Components
  /api/v2/compositeSourceControl/{ownerType}/{internalOwnerId}:
    get:
      operationId: getCompositeSourceControlByOwner
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCompositeSourceControlDTO'
          description: default response
      tags:
      - Composite Source Control
  /api/v2/compositeSourceControlConfigValidator/application/{applicationId}:
    get:
      operationId: validateSourceControlConfig
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigurationValidationResult'
          description: default response
      tags:
      - Composite Source Control Config Validator
  /api/v2/config:
    delete:
      operationId: deleteConfiguration
      parameters:
      - in: query
        name: property
        schema:
          items:
            $ref: '#/components/schemas/SystemConfigProperty'
          type: array
          uniqueItems: true
      responses:
        204:
          content: {}
          description: System Configuration removed
      tags:
      - Config
    get:
      operationId: getConfiguration
      parameters:
      - in: query
        name: property
        schema:
          items:
            $ref: '#/components/schemas/SystemConfigProperty'
          type: array
          uniqueItems: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
          description: System Configuration retrieved
      tags:
      - Config
    put:
      operationId: setConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemConfig'
      responses:
        204:
          content: {}
          description: System Configuration updated
      tags:
      - Config
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}:
    get:
      operationId: getOwnerArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: query
        name: inherit
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOwnerArtifactoryConnectionDTO'
          description: default response
      tags:
      - Config Artifactory Connection
    post:
      operationId: addArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: default response
      tags:
      - Config Artifactory Connection
    put:
      operationId: updateOwnerArtifactoryConnectionStatus
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionStatusRequestDTO'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Config Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/test:
    post:
      operationId: testArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: default response
      tags:
      - Config Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}:
    delete:
      operationId: deleteArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Artifactory Connection
    get:
      operationId: getArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: default response
      tags:
      - Config Artifactory Connection
    put:
      operationId: updateArtifactoryConnection
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiArtifactoryConnectionDTO'
          description: default response
      tags:
      - Config Artifactory Connection
  /api/v2/config/artifactoryConnection/{ownerType}/{internalOwnerId}/{artifactoryConnectionId}/test:
    post:
      operationId: testArtifactoryConnection_1
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: artifactoryConnectionId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: default response
      tags:
      - Config Artifactory Connection
  /api/v2/config/crowd:
    delete:
      operationId: deleteCrowdConfiguration
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Crowd
    get:
      operationId: getCrowdConfiguration
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
          description: default response
      tags:
      - Config Crowd
    put:
      operationId: insertOrUpdateCrowdConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Crowd
  /api/v2/config/crowd/test:
    post:
      operationId: testCrowdConfiguration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiCrowdConfigurationDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStatusDTO'
          description: default response
      tags:
      - Config Crowd
  /api/v2/config/features/{feature}:
    delete:
      operationId: disableFeature
      parameters:
      - in: path
        name: feature
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config
    post:
      operationId: enabledFeature
      parameters:
      - in: path
        name: feature
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config
  /api/v2/config/httpProxyServer:
    delete:
      operationId: deleteConfiguration_3
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Proxy Server
    get:
      operationId: getConfiguration_3
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiProxyServerConfigurationDTO'
          description: default response
      tags:
      - Config Proxy Server
    put:
      operationId: setConfiguration_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiProxyServerConfigurationDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Proxy Server
  /api/v2/config/jira:
    delete:
      operationId: deleteConfiguration_1
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config JIRA
    get:
      operationId: getConfiguration_1
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiJiraConfigurationDTO'
          description: default response
      tags:
      - Config JIRA
    put:
      operationId: setConfiguration_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config JIRA
  /api/v2/config/mail:
    delete:
      operationId: deleteConfiguration_2
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Mail
    get:
      operationId: getConfiguration_2
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiMailConfigurationDTO'
          description: default response
      tags:
      - Config Mail
    put:
      operationId: setConfiguration_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMailConfigurationDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Mail
  /api/v2/config/mail/test/{recipientEmail}:
    post:
      operationId: testConfiguration
      parameters:
      - in: path
        name: recipientEmail
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMailConfigurationDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Mail
  /api/v2/config/reverseProxyAuthentication:
    delete:
      operationId: deleteConfiguration_4
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Reverse Proxy Authentication
    get:
      operationId: getConfiguration_4
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReverseProxyAuthenticationConfigurationDTO'
          description: default response
      tags:
      - Config Reverse Proxy Authentication
    put:
      operationId: setConfiguration_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiReverseProxyAuthenticationConfigurationDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Reverse Proxy Authentication
  /api/v2/config/saml:
    delete:
      operationId: deleteSamlConfiguration
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config SAML
    get:
      operationId: getSamlConfiguration
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSamlConfigurationResponseDTO'
          description: default response
      tags:
      - Config SAML
  /api/v2/config/saml/metadata:
    get:
      operationId: getMetadata
      responses:
        default:
          content:
            application/xml:
              schema:
                type: string
          description: default response
      tags:
      - Config SAML
  /api/v2/config/sourceControl:
    delete:
      operationId: deleteConfiguration_5
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Source Control
    get:
      operationId: getConfiguration_5
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlConfigurationDTO'
          description: default response
      tags:
      - Config Source Control
    put:
      operationId: setConfiguration_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JsonNode'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Config Source Control
  /api/v2/cycloneDx/{cdxVersion}/{applicationId}/reports/{reportId}:
    get:
      description: 'Use this method to generate a CycloneDX SBOM for an application.<p>Permissions
        Required: View IQ Elements'
      operationId: getByReportId
      parameters:
      - description: Enter the internal applicationId for the application you want
          to generate the SBOM. You can also retrieve the applicationId using the
          Application REST API.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the reportId to generate the SBOM for the application for
          a specific scan report.
        in: path
        name: reportId
        required: true
        schema:
          type: string
      - description: Possible values are 1.1|1.2|1.3|1.4|1.5|1.6.
        in: path
        name: cdxVersion
        required: true
        schema:
          pattern: 1.1|1.2|1.3|1.4|1.5|1.6
          type: string
      responses:
        '200':
          content:
            application/json: {}
            application/xml: {}
          description: A downloadable file will be generated.
      tags:
      - CycloneDX
  /api/v2/cycloneDx/{cdxVersion}/{applicationId}/stages/{stageId}:
    get:
      description: 'Use this method to generate a CycloneDX SBOM for an application.<p>Permissions
        Required: View IQ Elements'
      operationId: getLatest
      parameters:
      - description: Enter the internal applicationId for the application you want
          to generate the SBOM. You can also retrieve the applicationId using the
          Application REST API.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the stageId to generate the SBOM based on the latest application
          policy evaluation at that stage. Allowed values for stageId are 'develop',
          'source', 'build', 'stage-release', 'release', and, 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Possible values are 1.1|1.2|1.3|1.4|1.5|1.6.
        in: path
        name: cdxVersion
        required: true
        schema:
          pattern: 1.1|1.2|1.3|1.4|1.5|1.6
          type: string
      responses:
        '200':
          content:
            application/json: {}
            application/xml: {}
          description: A downloadable file will be generated.
      tags:
      - CycloneDX
  /api/v2/dataRetentionPolicies/organizations/{organizationId}:
    get:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to inspect the retention policies
        that are in effect for an organization. Application reports created by continuous
        monitoring are not affected by the stage retention policy. They appear separately
        under the key continuous-monitoring in the response JSON<p>Permissions required:
        View IQ Elements'
      operationId: getDataRetentionPolicies
      parameters:
      - description: The organizationId assigned by IQ Server. Use the organization
          REST API to retrieve the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
          description: The response JSON contains the policy settings for both applicationReports
            and successMetrics. Policy settings for application reports are shown
            for each stage of development. <ul><li>inheritPolicy IS a boolean flag
            indicating whether the policy is inherited from a parent organization.</li><li>enablePurging
            IS a boolean flag indicating if automatic purging is enabled or disabled.</li><li>maxCount
            IS the maximum no. of reports to retain.</li><li>maxAge IS the maximum
            age that a report is allowed to reach before it is purged. Possible values
            are days, weeks, months, years.</li></ul>The latest application report
            is always retained, regardless of its age.
      tags:
      - Data Retention Policies
    put:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to set the retention policies for
        an organization. Application reports created by continuous monitoring are
        not affected by the stage retention policy. They appear separately under the
        key continuous-monitoring.<p>Permissions required: Edit IQ Elements'
      operationId: setDataRetentionPolicies
      parameters:
      - description: The organizationId for the organization you want to set the data
          retention policy. Use the organization REST API to retrieve the organizationId.
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
        description: "The request JSON should include the retention policy settings\
          \ for both application reports and success metrics.\n\nPolicy settings for\
          \ application reports can be specified for each stage of development represented\
          \ in the example below by additionalProp1. \nExample values for additionalProp1\
          \ are develop, build, stage-release, release, operate & continuous monitoring.\
          \ For application reports created during continuous monitoring use the key\
          \ continuous-monitoring instead of the stage name. <ul><li>inheritPolicy\
          \ IS a boolean flag indicating whether the policy is inherited from a parent\
          \ organization.</li><li>enablePurging IS a boolean flag indicating enabled\
          \ or disabled status for automatic purging. </li><li>maxCount IS the maximum\
          \ no. of reports to retain.</li><li>maxAge IS the maximum age that a report\
          \ is allowed to reach before it is purged. Possible values are days, weeks,\
          \ months, years.</li></ul>"
        required: true
      responses:
        '200':
          description: The data retention policy has been set successfully.
      tags:
      - Data Retention Policies
  /api/v2/dataRetentionPolicies/organizations/{organizationId}/parent:
    get:
      description: 'Data retention policies help to limit the disk space consumption
        by removing obsolete data. Use this method to inspect the retention policies
        that are in effect for the parent organization of the given organization.
        Application reports created by continuous monitoring are not affected by the
        stage retention policy. They appear separately under the key continuous-monitoring.<p>Permissions
        required: View IQ Elements'
      operationId: getParentDataRetentionPolicies
      parameters:
      - description: The organizationId assigned by IQ Server. Use the organization
          REST API to retrieve the parent organizationId
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDataRetentionPoliciesDTO'
          description: The response JSON contains the policy settings for both applicationReports
            and successMetrics. Policy settings for application reports are shown
            for each stage of development. <ul><li>inheritPolicy IS a boolean flag
            indicating whether the policy is inherited from a parent organization.</li><li>enablePurging
            IS a boolean flag indicating if automatic purging is enabled or disabled.</li><li>maxCount
            IS the maximum no. of reports to retain.</li><li>maxAge IS the maximum
            age that a report is allowed to reach before it is purged. Possible values
            are days, weeks, months, years.</li></ul>The latest application report
            is always retained, regardless of its age.
      tags:
      - Data Retention Policies
  /api/v2/endpoints/{apiType}:
    get:
      operationId: getOpenAPI
      parameters:
      - in: path
        name: apiType
        required: true
        schema:
          enum:
          - public
          - experimental
          pattern: public|experimental
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                type: string
          description: default response
      tags:
      - Endpoints
  /api/v2/evaluation/applications/{applicationId}:
    post:
      description: 'Use this method to request a component evaluation. This is step
        1 of the 2 step policy evaluation for components process.


        Permissions Required: Evaluate Components'
      operationId: evaluateComponents
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiComponentEvaluationRequestDTOV2'
        description: The request JSON should contain component coordinates or the
          hash (SHA1) for each component. You can provide the packageURL instead of
          component information or hash.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentEvaluationTicketDTOV2'
          description: 'The JSON response contains resultId that will be assigned
            to the evaluation results, timestamp when the component evaluation was
            requested, the applicationId of the component and the results URL. The
            resultId obtained from here can be used to retrieve the evaluation result
            using the REST API or the result URL can be used in cURL. '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/promoteScan:
    post:
      description: "Use this method to rescan older scans. This is done when the binaries\
        \ of a previous build are now moving to a new stage in the production pipeline.\
        \ Using this method, you can avoid rebuilding the application and reuse the\
        \ scan metadata at the newer stage. This new evaluation will evaluate the\
        \ most recent security and license data against your current policies. \n\n\
        Permissions Required: Evaluate Applications"
      operationId: promoteScan
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiPromoteScanRequestDTOV2'
        description: You can provide either the scanId (reportId) of the previous
          scan OR the source stageId (possible values are 'build', 'stage-release',
          'release' or 'operate'). When using the stageId, the latest scanId for the
          application will be used. Enter the targetStageId for the new stage you
          want your scan to be promoted to (possible values are 'build', 'stage-release',
          'release' or 'operate'). Using the same value for source and target stage
          will resubmit the latest scan report.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationStatusDTOV2'
          description: The response will contain the statusUrl to view the evaluation
            result using the GET method (step 2)
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/results/{resultId}:
    get:
      description: "This is step 2 of the policy evaluation process for components.\
        \ Use the resultId obtained from the POST response for the corresponding applicationId.\
        \ \n\nPermissions Required: Evaluate Components "
      operationId: getComponentEvaluation
      parameters:
      - description: Enter the internal applicationId (same as that sent in the POST
          request (step 1))
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the resultId obtained from the POST response (step 1) used
          for component evaluation.
        in: path
        name: resultId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentEvaluationResultDTOV2'
          description: The response contains details for the policy evaluation request
            including submitted date, evaluation date, applicationId and the results
            of the evaluation for the component(s).
        '404':
          description: 'Response not ready '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/sourceControlEvaluation:
    post:
      description: "Use this method to request a source control evaluation for a specific\
        \ application. This is step 1 of the 2 step source control evaluation process.\
        \ \n\nPermissions Required: Evaluate Applications"
      operationId: evaluateSourceControl
      parameters:
      - description: Enter the internal applicationId. Use the Applications REST API
          to retrieve the internal applicationId.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlEvaluationRequestDTO'
        description: The request JSON should include the 1. branch name (name of the
          target branch in the source control repository, 2. stageId (recommended
          values are 'develop' for feature branches, and 'source' for default branches.
          Other stageIds that can be used are 'build', 'stage-release', 'release',
          'operate' but are not recommended), 3. scanTargets (optional, specify one
          or more paths inside the repository. If not specified, the entire repository
          will be evaluated by default). Ensure that the repository paths are not
          relative and do not contain '../' or '..\'.
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationStatusDTOV2'
          description: 'The response contains statusUrl. Use this statusUrl to check
            the evaluation status using the GET method (step 2 of the evaluation process). '
      tags:
      - Policy Evaluation
  /api/v2/evaluation/applications/{applicationId}/status/{statusId}:
    get:
      description: "This is step 2 of the policy evaluation process. Use the statusUrl\
        \ obtained from the POST response for the corresponding applicationId. \n\n\
        Permissions Required: Evaluate Applications"
      operationId: getApplicationEvaluationStatus
      parameters:
      - description: Enter the applicationId, for the which policy evaluation was
          requested.
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Enter the statusId value obtained as response of the POST call
          in step 1.
        in: path
        name: statusId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationEvaluationResultDTOV2'
          description: 'The response will include one of the 3 possible status values:
            PENDING (indicates that the evaluation is still in progress), FAILED or
            COMPLETED. For completed evaluations, the response will contain the URLs
            for evaluation report to view the evaluation results.'
      tags:
      - Policy Evaluation
  /api/v2/firewall/components/autoReleasedFromQuarantine:
    get:
      operationId: getUnquarantineList
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - in: query
        name: policyId
        schema:
          type: string
      - in: query
        name: componentName
        schema:
          type: string
      - in: query
        name: sortBy
        schema:
          type: string
      - in: query
        name: asc
        schema:
          default: true
          type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/components/quarantined:
    get:
      operationId: getQuarantineList
      parameters:
      - in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - in: query
        name: policyId
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - in: query
        name: componentName
        schema:
          type: string
      - in: query
        name: sortBy
        schema:
          type: string
      - in: query
        name: asc
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/components/{repositoryManagerId}/{repositoryId}/evaluate:
    post:
      operationId: evaluateComponents_1
      parameters:
      - in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      - in: path
        name: repositoryId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryComponentEvaluationRequestList'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryComponentEvaluationResultList'
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/metrics/embedded:
    get:
      operationId: getFirewallMetrics
      responses:
        default:
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ApiFirewallMetricsResultDTO'
                type: object
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/quarantine/summary:
    get:
      operationId: getQuarantineSummary
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallQuarantineSummaryDTO'
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/quarantinedComponentView/configuration/anonymousAccess:
    get:
      operationId: getQuarantinedComponentViewAnonymousAccess
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/quarantinedComponentView/configuration/anonymousAccess/{enabled}:
    put:
      operationId: setQuarantinedComponentViewAnonymousAccess
      parameters:
      - in: path
        name: enabled
        required: true
        schema:
          type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/releaseQuarantine/configuration:
    get:
      operationId: getFirewallAutoUnquarantineConfig
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
                type: array
          description: default response
      tags:
      - Firewall
    put:
      operationId: setFirewallAutoUnquarantineConfig
      requestBody:
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiFirewallReleaseQuarantineConfigDTO'
                type: array
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/releaseQuarantine/summary:
    get:
      operationId: getFirewallUnquarantineSummary
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiFirewallReleaseQuarantineSummaryDTO'
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/repositories/configuration/{repositoryManagerId}:
    get:
      operationId: getConfiguredRepositories
      parameters:
      - in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      - in: query
        name: sinceUtcTimestamp
        schema:
          format: int64
          type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryListDTO'
          description: default response
      tags:
      - Firewall
    post:
      operationId: configureRepositories
      parameters:
      - in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryListDTO'
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/repositoryContainer:
    get:
      operationId: getRepositoryContainer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryContainerDTO'
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/repositoryManagers:
    get:
      operationId: getRepositoryManagers
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerListDTO'
          description: default response
      tags:
      - Firewall
    post:
      operationId: addRepositoryManager
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRepositoryManagerDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          description: default response
      tags:
      - Firewall
  /api/v2/firewall/repositoryManagers/{repositoryManagerId}:
    delete:
      operationId: deleteRepositoryManager
      parameters:
      - in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Firewall
    get:
      operationId: getRepositoryManager
      parameters:
      - in: path
        name: repositoryManagerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryManagerDTO'
          description: default response
      tags:
      - Firewall
  /api/v2/labels/{ownerType}/{ownerId}:
    get:
      operationId: getLabels
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      - in: query
        name: inherit
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiLabelDTO'
                type: array
          description: default response
      tags:
      - Labels
    post:
      operationId: addLabel
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLabelDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLabelDTO'
          description: default response
      tags:
      - Labels
    put:
      operationId: updateLabel
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiLabelDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLabelDTO'
          description: default response
      tags:
      - Labels
  /api/v2/labels/{ownerType}/{ownerId}/applicable:
    get:
      operationId: getApplicableLabels
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableLabels'
          description: default response
      tags:
      - Labels
  /api/v2/labels/{ownerType}/{ownerId}/applicable/context/{labelId}:
    get:
      operationId: getApplicableContexts
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      - in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicableContext'
          description: default response
      tags:
      - Labels
  /api/v2/labels/{ownerType}/{ownerId}/{labelId}:
    delete:
      operationId: deleteLabel
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      - in: path
        name: labelId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Labels
  /api/v2/licenseLegalMetadata/application/{applicationId}:
    get:
      operationId: getLicenseLegalApplicationReport
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalApplicationReportDTO'
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}:
    get:
      operationId: getLicenseLegalApplicationReport_1
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: stageId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalApplicationReportDTO'
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report:
    get:
      operationId: getLicenseLegalApplicationHTMLReport
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: stageId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
    post:
      operationId: getLicenseLegalCustomApplicationHTMLReport
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: stageId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FormDataMultiPart'
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/application/{applicationId}/stage/{stageId}/report/templateId/{templateId}:
    post:
      operationId: getLicenseLegalCustomApplicationHTMLReport_1
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: stageId
        required: true
        schema:
          type: string
      - in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/multiApplication/activeUserFilter/report/templateId/{templateId}:
    post:
      operationId: getLicenseLegalMultiApplicationReportFromActiveUserFilter
      parameters:
      - in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/multiApplication/report:
    post:
      operationId: getLicenseLegalMultiApplicationHTMLReport
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/multiApplication/report/templateId/{templateId}:
    post:
      operationId: getLicenseLegalCustomMultiApplicationHTMLReport_1
      parameters:
      - in: path
        name: templateId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            text/html:
              schema:
                type: string
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/report-template:
    get:
      operationId: getAllAttributionReportTemplates
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AttributionReportTemplateDTO'
                type: array
          description: default response
      tags:
      - License Legal Metadata
    post:
      operationId: saveAttributionReportTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttributionReportTemplateDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributionReportTemplateDTO'
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/report-template/{id}:
    delete:
      operationId: deleteAttributionReportTemplate
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - License Legal Metadata
    get:
      operationId: getAttributionReportTemplateById
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttributionReportTemplateDTO'
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/licenseLegalMetadata/{ownerType}/{ownerId}/component:
    get:
      operationId: getLicenseLegalComponentReport
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: ownerId
        required: true
        schema:
          type: string
      - in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - in: query
        name: packageUrl
        schema:
          type: string
      - in: query
        name: hash
        schema:
          type: string
      - in: query
        name: identificationSource
        schema:
          type: string
      - in: query
        name: scanId
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiLicenseLegalComponentReportDTO'
          description: default response
      tags:
      - License Legal Metadata
  /api/v2/organizations:
    get:
      operationId: getOrganizations
      parameters:
      - in: query
        name: organizationName
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationListDTO'
          description: default response
      tags:
      - Organizations
    post:
      operationId: addOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiOrganizationDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationDTO'
          description: default response
      tags:
      - Organizations
  /api/v2/organizations/{organizationId}:
    delete:
      operationId: deleteOrganization
      parameters:
      - in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Organizations
    get:
      operationId: getOrganization
      parameters:
      - in: path
        name: organizationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiOrganizationDTO'
          description: default response
      tags:
      - Organizations
  /api/v2/organizations/{organizationId}/move/destination/{destinationId}:
    put:
      operationId: moveOrganization
      parameters:
      - in: path
        name: organizationId
        required: true
        schema:
          type: string
      - in: path
        name: destinationId
        required: true
        schema:
          type: string
      - in: query
        name: failEarlyOnError
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json: {}
          description: default response
      tags:
      - Organizations
  /api/v2/policies:
    get:
      operationId: getPolicies
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyListDTO'
          description: default response
      tags:
      - Policies
  /api/v2/policyViolations:
    get:
      description: 'Use this method to retrieve policy violation details for a policy/policies.
        You will need the policyId(s) to retrieve the policy violations details. policyId
        is available as the response field of the Policies REST API.


        Permissions required: View IQ Elements'
      operationId: getPolicyViolations
      parameters:
      - description: Enter the policyIds to obtain the corresponding violation details
        in: query
        name: p
        required: true
        schema:
          items:
            type: string
          type: array
          uniqueItems: true
      - description: Enter the date (format YYYY-MM-DD) from which you want to retrieve
          the violation details
        in: query
        name: openTimeAfter
        schema:
          type: string
      - description: Enter the date (format YYYY-MM-DD) until which you want to retrieve
          the violation details
        in: query
        name: openTimeBefore
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiApplicationViolationListDTOV2'
          description: The response contains the details of the application that violates
            the policy/policies and violation details grouped under the policyIds
            provided. `openTime` indicates the date and time when the violation was
            first detected. `reference` is the reference data that triggered the violation.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/crossStage:
    get:
      description: 'A cross-stage policy violation represents an aggregate of all
        violations of a policy  occurring across multiple stages of an application.
        Cross-stage policy violations are helpful in performance analysis by determining
        the time taken to remediate a violation across all stages where it was detected.

        Use this method to retrieve all cross-stage violations, irrespective of the
        time they were detected.


        Permissions required: View IQ Elements'
      operationId: getCrossStagePolicyViolationByConstituentId
      parameters:
      - description: Enter the violationId. Use the GET method described for the endpoint
          /api/v2/policyViolations to obtain the policy violationId.
        in: query
        name: constituentId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrossStageViolationDTOV2'
          description: The response contains violation details for all occurrences
            of the same policy violation, across multiple stages. stageData indicates
            the name of the stages where the violation occurred, the scanId/reportId
            when it was reported and the policy action triggered due to the violation.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/crossStage/{violationId}:
    get:
      description: 'A cross-stage policy violation represents an aggregate of all
        violations of the same policy, occurring at multiple stages for an application.
        Cross-stage policy violations are helpful in performance analysis by determining
        the time taken to remediate a violation across all stages where it was detected.

        Use this method to retrieve cross-stage policy violations.


        Permissions required: View IQ Elements'
      operationId: getCrossStagePolicyViolationById
      parameters:
      - description: 'Enter the policy `violationId`. Use the GET method described
          for the endpoint /api/v2/policyViolations to obtain the policy violationId. '
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiCrossStageViolationDTOV2'
          description: The response contains violation details for all occurrences
            of the same policy violation across multiple stages. `stageData` indicates
            the name of the stages where the violationoccurred, and `reportId` where
            it was reported and the policy action triggered due to the violation.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/transitive/{ownerType}/{ownerId}/stages/{stageId}:
    get:
      description: 'Use this method to obtain all transitive policy violations for
        a given component in  a specific stage. Transitive policy violations are violations
        caused by transitive dependencies.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyViolationsByOwnerStageComponent
      parameters:
      - description: Possible values are 'application' or 'organization'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - description: Possible values are applicationId, organizationId
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Possible values are 'develop', 'source', 'build', 'stage-release',
          'release', and, 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and the coordinates of the component
          for which you want to obtain the transitive violations. This is optional,
          not required if package URL or hash value is provided.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the component. This is optional, not
          required if component identifier or hash value is provided.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash value of the component. This is optional, not
          required if component identifier or package URL is provided.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentTransitivePolicyViolationsDTO'
          description: The response contains all transitive violations detected for
            the component specified. In addition to the policy violation details like
            the name/id of the policy violated, threat level threat category, etc.
            the response also indicates if the violation is due to an 'InnerSource'
            component.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/transitive/{ownerType}/{ownerId}/{scanId}:
    get:
      description: 'Use this method to retrieve transitive policy violations for a
        given component in a specific scan.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyViolationsByAppScanComponent
      parameters:
      - description: Enter the scope for this violation. Possible values are 'application'
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application
          type: string
      - description: Enter the identifier for the scope specified above. E.g. applicationId
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId/reportId corresponding to the scan.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and the coordinates of the component
          for which you want to retrieve the transitive policy violations. This is
          optional, not required if package URL or hash value is provided.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL for the component for which you want to
          retrieve the transitive policy violations in the specific scan.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash value for the component for which you want to
          retrieve the transitive policy violations in the specific scan.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentTransitivePolicyViolationsDTO'
          description: The response contains violation details for all transitive
            violations occurring in the scan specified. The response also indicates
            if the violation is due to an 'InnerSource' component.
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/applicableWaivers:
    get:
      description: 'Use this method to obtain all existing waivers that are applicable
        to a policy violation. A waiver is considered as ''applicable'' if it matches
        the following conditions:<ul><li>The policyId for the policy violation matches
        the policyId associated with the waiver</li><li>The violated policy conditions
        match the policy conditions of the waiver/li><li>The waiver scope matches
        the violating component</li></ul>


        Permissions required: View IQ Elements'
      operationId: getApplicableWaivers
      parameters:
      - description: Enter the policy violationId for which you want to obtain the
          applicable waivers.
        in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiversApplicableToViolationDTO'
          description: 'The response contains details for all applicable waivers for
            the `violationId` specified. It is grouped under ''activeWaivers'' and
            ''expiredWaivers''. `scope` indicates the scope of the applicable waiver.
            Possible values for the enum field `matcherStrategy` are EXACT_COMPONENT,
            ALL_COMPONENTS, ALL_VERSIONS).


            `reference` shows the reference data that triggered the violation. `componentUpgradeAvailable`
            indicates if a non-violating version of the component is available to
            remediate the violation.'
      tags:
      - Policy Violation Details
  /api/v2/policyViolations/{violationId}/similarWaivers:
    get:
      operationId: getSimilarWaivers
      parameters:
      - in: path
        name: violationId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverDTO'
                type: array
          description: default response
      tags:
      - Policy Violation Details
  /api/v2/policyWaiverReasons:
    get:
      operationId: getPolicyWaiverReasons
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverReasonDTO'
                type: array
          description: default response
      tags:
      - Policy Waiver Reasons
  /api/v2/policyWaivers/transitive/{ownerType}/{ownerId}/stages/{stageId}:
    post:
      description: 'Use this method to add a waiver for all transitive violations
        for a given component, detected in the latest scan at the stage specified.


        Permissions required: Waive Policy Violations'
      operationId: addWaiverToTransitivePolicyViolationsByOwnerStageComponent
      parameters:
      - description: Indicates the scope of the waiver that will be created.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
          E.g. applicationId for ownerType 'application' or organizationId for ownerType
          'organization'.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the stageId corresponding to the evaluation stage at which
          you want to create a waiver. Possible values are 'develop', 'source', 'build',
          'stage-release', 'release' and 'operate'.
        in: path
        name: stageId
        required: true
        schema:
          type: string
      - description: Enter the component identifier and coordinates of the component
          for which you want to waive the transitive violations.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the component for which you want to
          waive the transitive violations.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: 'Enter the hash for the component for which you want to waive
          the transitive violations '
        in: query
        name: hash
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: <ol><li>comment (optional, to indicate the reason of the waiver)
          default value is null</li><li>applyToAllComponents (boolean, default 'false'),deprecated
          in favor of matcherStrategy. If matcherStrategy is not set, 'true' means
          this will apply the waiver to all components, 'false' means this will apply
          to a specific component.</li><li>matcherStrategy (enumeration, required)
          can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
        required: true
      responses:
        '204':
          description: Waiver created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/transitive/{ownerType}/{ownerId}/{scanId}:
    get:
      description: 'Use this method to retrieve all waivers on policy violations due
        to transitive dependencies for a specific component detected in a specific
        scan. Any one of the input parameters, i.e. componentIdentifier, packageUrl
        or hash is required. If more than one is provided, the system will pick them
        in the order specified here.


        Permissions required: View IQ Elements'
      operationId: getTransitivePolicyWaiversByAppScanComponent
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the policy violations that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId (reportId) of the scan for which you want to
          retrieve the waivers on transitive policy violations occurring due the dependencies
          of a component.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier for the component for which you
          want to retrieve the waivers on transitive policy violations, for the specified
          scanId.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL for the component for which you want to
          retrieve the waivers on transitive policy violations, for the specified
          scanId.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash for the component for which you want to retrieve
          the waivers on transitive policy violations, for the specified scanId.
        in: query
        name: hash
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentPolicyWaiversDTO'
          description: The response contains a list of waivers on transitive policy
            violations for the dependencies of the component specified, for the given
            scanId.
      tags:
      - Policy Waivers
    post:
      description: 'Use this method to create a policy waiver on a transitive component
        detected during the specified scan. NOTE: Any one of the input parameters,
        i.e. component identifier, packageUrl or hash is required. If more than one
        is provided, the system will pick them in the order specified here.


        Permissions required: Waive Policy Violations'
      operationId: addWaiverToTransitivePolicyViolationsByAppScanComponent
      parameters:
      - description: Indicates the scope of the waiver that will be created.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the scanId (reportId) of the evaluation report that shows
          the transitive component.
        in: path
        name: scanId
        required: true
        schema:
          type: string
      - description: Enter the component identifier of the transitive component on
          which you want to create a policy waiver.
        in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - description: Enter the package URL of the transitive component on which you
          want to create a policy waiver.
        in: query
        name: packageUrl
        schema:
          type: string
      - description: Enter the hash of the transitive component on which you want
          to create a policy waiver.
        in: query
        name: hash
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>applyToAllComponents
          (boolean, default 'false'),deprecated in favor of matcherStrategy. If matcherStrategy
          is not set, 'true' means this will apply the waiver to all components, 'false'
          means this will apply to a specific component.</li><li>matcherStrategy (enumeration,
          required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
      responses:
        '204':
          description: No content. Indicates that the waiver has been created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/waiverRequests/{policyViolationId}:
    post:
      description: Use this method to trigger a waiver request webhook event. The
        'Waiver Request' event type should have been configured as one of the IQ Server
        webhooks, before using this method.
      operationId: requestPolicyWaiver
      parameters:
      - description: Enter the policyViolationId for which you want to trigger the
          waiver request event.
        in: path
        name: policyViolationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRequestPolicyWaiverDTO'
        description: The request JSON should contain<ol><li>comment (optional, default
          null) to indicate the waiver request reason</li><li>policyViolationLink
          (link to the policy violation page in the Lifecycle UI)</li><li>addWaiverLink
          (link to the Add Waiver page in the Lifecycle UI)</li></ol>
      responses:
        '204':
          description: Waiver request webhook triggered successfully
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}:
    get:
      description: 'Use this method to retrieve waiver details for all policy waivers
        for the scope specified. You can specify the scope by using the parameters
        ownerType and ownerId.


        Permissions required: View IQ Elements'
      operationId: getPolicyWaivers
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          waivers that are within the scope specified.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiPolicyWaiverDTO'
                type: array
          description: The response contains waiver details for the specified ownerType
            and the corresponding ownerId, grouped by the policyWaiverId. The response
            field 'matcherStrategy' indicates whether the waiver applies to a specific
            component, or all components that exist at that level of hierarchy (root
            org, org application), or all versions of the component (past, present,
            and future). The response fields associatedPackageUrl, displayName, and
            componentIdentifier are null for waivers on all components and unknown
            components.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}/{policyViolationId}:
    post:
      description: 'Use this method to create a policy waiver.


        Permissions required: Waive Policy Violations'
      operationId: addPolicyWaiverByPolicyViolationId
      parameters:
      - description: Indicates the scope of the waiver. Possible values are application,
          organization, repository, repository_manager, repository_container, global.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the id for the ownerType provided above. E.g. applicationId
          if the ownerType is application.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyViolationId for the policy on which you want
          to create a waiver. Use the Policy Violation REST API or Reports REST API
          to obtain the policyViolationId.
        in: path
        name: policyViolationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiWaiverOptionsDTO'
        description: The request JSON can include the fields<ol><li>comment (optional,
          to indicate the reason of the waiver) default value is null</li><li>applyToAllComponents
          (boolean, default 'false'),deprecated in favor of matcherStrategy. If matcherStrategy
          is not set, 'true' means this will apply the waiver to all components, 'false'
          means this will apply to a specific component.</li><li>matcherStrategy (enumeration,
          required) can have values DEFAULT, EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS.
          DEFAULT will match all components if no hash is provided.</li><li>expiryTime
          (default null) to set the datetime when the waiver expires.</li></ol>
        required: true
      responses:
        '204':
          description: No content. Indicates that the waiver has been created successfully.
      tags:
      - Policy Waivers
  /api/v2/policyWaivers/{ownerType}/{ownerId}/{policyWaiverId}:
    delete:
      description: 'Use this method to delete a waiver, specified by the policyWaiverId.


        Permissions required: Waive Policy Violations'
      operationId: deletePolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. A waiver corresponding
          to the policyWaiverId provided and within the scope specified will be deleted.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyWaiverId to be deleted.
        in: path
        name: policyWaiverId
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Waiver has been deleted successfully.
      tags:
      - Policy Waivers
    get:
      description: 'Use this method to retrieve waiver details for the waiverId specified.


        Permissions required: View IQ Elements'
      operationId: getPolicyWaiver
      parameters:
      - description: Enter the ownerType to specify the scope. The response will contain
          the details for waivers within the scope.
        in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization|repository|repository_manager|repository_container
          type: string
      - description: Enter the corresponding id for the ownerType specified above.
        in: path
        name: ownerId
        required: true
        schema:
          type: string
      - description: Enter the policyWaiverId for which you want to retrieve the waiver
          details.
        in: path
        name: policyWaiverId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPolicyWaiverDTO'
          description: The response contains waiver details corresponding to the policy
            waiverId specified.
      tags:
      - Policy Waivers
  /api/v2/reports/applications:
    get:
      description: "Use this method to view all application reports for applications\
        \ to which  you have access. \n\nPermissions required: View IQ Elements "
      operationId: getAll_1
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationReportDTOV2'
                type: array
          description: 'The response JSON contains URLs to view the report data in
            html and pdf format, for each application to which you have access.


            The response field stage indicates the stage at which the policy evaluation
            was executed, such as ''develop'', ''build'' and ''release'' The response
            field latestReportHtmlUrl is a relative link to view the most recent report.
            Response fields reportPdfUrl and reportHtmlUrl are links to view the pdf
            version of the report.The response field reportDataUrl is a link to view
            the most recent report data. '
      tags:
      - Reports
  /api/v2/reports/applications/{applicationId}:
    get:
      description: "Use this method to retrieve the application reports for the specified\
        \ application Id. You can view application reports only for applications to\
        \ which you have access. \n\nPermissions required: View IQ Elements "
      operationId: getByApplicationId
      parameters:
      - description: 'Enter the internal application Id. You can use the Applications
          REST API to get the internal application Id. '
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiApplicationReportDTOV2'
                type: array
          description: "The response JSON contains the URLs to access the latest scan\
            \ report for the applicationId provided. \n\nThe response field `stage`\
            \ indicates the stage at which the policy evaluation was executed, such\
            \ as 'develop', 'build', 'release'.  The response field `latestReportHtmlUrl`\
            \ is a relative link to view the most recent report. Response fields `reportPdfURL`\
            \ and `reportHtmlURL` are links to view the pdf version of the report.\
            \ The response field `reportDataUrl` is a link to view the most recent\
            \ report data. "
      tags:
      - Reports
  /api/v2/reports/applications/{applicationId}/history:
    get:
      description: "Use this method to retrieve previous application scan reports\
        \ (100 max.) for the specified application. You can view application reports\
        \ only for applications to which you have access.  \n\nPermissions required:\
        \ View IQ Elements "
      operationId: getReportHistoryForApplication
      parameters:
      - description: 'Enter the internal application Id. You can use the Applications
          REST API to get the internal application Id. '
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: 'Enter the specific stage, for which you want retrieve the scan
          history, e.g. ''build'' '
        in: query
        name: stage
        schema:
          type: string
      - description: Enter the exact no. of most recent reports to retrieve.
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiReportHistoryDTO'
          description: "The response contains evaluation details, embeddable link\
            \ and URLs to view the reports in pdf and html formats. \n\n<ul><li><code>stage</code>\
            \ indicates the stage at which policy evaluation was performed, such as\
            \ 'develop', 'build' and 'release'.</li><li><code>latestReportHtmlUrl</code>\
            \ is a relative link to view the most recent evaluation report.</li><li><code>reportPdfUrl</code>\
            \ and <code>reportHtmlUrl</code> are links to view the pdf version of\
            \ the report.</li><li><code>reportDataUrl</code> is a link to view the\
            \ most recent report data.</li><li><code>scanId</code> is the Id associated\
            \ with the evaluation report.</li><li><code>isReevaluation</code> indicates\
            \ whether this policy evaluation is a re-evaluation of an older policy\
            \ evaluation.</li><li><code>isForMonitoring</code> indicates whether this\
            \ policy evaluation was triggered by continuous monitoring.</li><li><code>commitHash</code>\
            \ is the hash string that identifies a specific commit in the source control\
            \ system.</li><li><code>scanTriggerType</code> indicates the type of scan\
            \ used for this evaluation, such as WEB_UI.</li><li><code>affectedComponentCount</code>\
            \ is the number of components identified in this evaluation.</li><li><code>criticalComponentCount</code>,\
            \ <code>severeComponentCount</code>, <code>moderateComponentCount</code>\
            \ indicate the number of components with critical, severe and moderate\
            \ policy violations respectively.</li><li><code>criticalPolicyViolationCount</code>,\
            \ <code>severePolicyViolationCount</code>, <code>moderatePolicyViolationCount</code>\
            \ indicate the number of critical, severe and moderate policy violations\
            \ respectively.</li><li><code>policyEvaluationResult</code> contains details\
            \ on the policy violation such as, coordinates of the violating component\
            \ and the specific policy constraints that are violated.</li></ul>"
        '400':
          description: Error in request. Check for missing or invalid parameter.
        '404':
          description: Scan report history could not be found.
      tags:
      - Reports
  /api/v2/reports/components/quarantined:
    get:
      description: "Use this method to retrieve all repository components that are\
        \ quarantined. The response contains violation details and the quarantine\
        \ Id of the component. Use the quarantine Id,  to release the component from\
        \ quarantine, using the Release from Quarantine REST API. \n\nPermissions\
        \ required: View IQ Elements and access to the specific repository."
      operationId: getComponentsInQuarantine
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentsInQuarantineDTO'
          description: 'The JSON response returns the component details and policy
            violation details that are triggering the quarantine. If a quarantined
            component does not show any policy violation, it implies that the policy
            violations have been waived, but the component has not been released from
            quarantine. '
      tags:
      - Reports
  /api/v2/reports/components/waivers:
    get:
      description: 'Use this method to retrieve existing policy waivers by components.
        For an up-to-date response, ensure that all application and repository reports
        are current and contain the most recent re-evaluation data.<p>You can specify
        the format/ecosystem of the component for a filtered result. <p>Permissions
        required: View IQ Elements and access to the specific applications and repositories '
      operationId: getComponentsWithWaivers
      parameters:
      - description: Enter the format/ecosystem of the component
        in: query
        name: format
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentWaiversDTO'
          description: The JSON response contains waivers grouped by application components
            and repository components. Waived violations for application components
            are listed per stage. Waived violations for repository components are
            listed in the Proxy stage. <p>The component hash is null if the waiver
            applies to all components or all versions of a component. It is truncated
            and meant to be used as an identifier to other REST API calls and not
            for use as checksum. <p>`isObsolete` indicates if a waived violation does
            not have a valid waiver information. This could happen when a waiver has
            been removed and the report has not been re-evaluated.<p>`matcherStrategy`
            can have values EXACT_COMPONENT, ALL_COMPONENTS, ALL_VERSIONS. <p>The
            response fields `associatedPackageUrl`, `componentIdentifier` and `displayName`
            are returned only if the waiver is of type ALL_VERSIONS OR EXACT_COMPONENTS
            and the component is not an unknown component .
      tags:
      - Reports
  /api/v2/reports/metrics:
    post:
      description: 'Use this method to retrieve metrics data such as policy evaluation
        metrics, violation and remediation metrics aggregated monthly or weekly.


        Permissions required: View IQ Elements'
      operationId: getMetrics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiMetricsReportingQueryDTOV2'
      responses:
        '200':
          content:
            application/json: {}
            text/csv: {}
          description: Select the media type JSON or csv for the preferred output
            format.
      tags:
      - Reports
  /api/v2/reports/waivers/stale:
    get:
      description: "Stale waivers pose a risk because they could be applied unintentionally.\
        \ Use this method to retrieve stale waivers to eliminate this risk for future\
        \ application evaluations. \n\nPermissions required: View IQ Elements. You\
        \ can view stale waivers only for applications/repositories  to which you\
        \ have access. "
      operationId: getStaleWaivers
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiStaleWaiversResponseDTO'
          description: 'The response contains waiverId of the stale waiver, policyId
            and policyName of the policy being waived, comment, waiver scope, time
            created, expiry time and the waiver creator details. The response field
            staleEvaluations contains a list of applications or repositories that
            have not been evaluated since the waiver was created. '
        '409':
          description: Found waivers for applications/repositories that have not been
            evaluated since IQ Server version 76. Re-evaluating the repository is
            recommended.
      tags:
      - Reports
  /api/v2/repositories/quarantine/{quarantineId}/release:
    post:
      operationId: releaseQuarantineWithoutReEval
      parameters:
      - in: path
        name: quarantineId
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiComponentReleasedFromQuarantineDTO'
          description: default response
      tags:
      - Repositories
  /api/v2/repositories/{repositoryManagerInstanceId}/{repositoryPublicId}/components/quarantined/pathnames:
    post:
      operationId: getQuarantinedByPath
      parameters:
      - in: path
        name: repositoryManagerInstanceId
        required: true
        schema:
          type: string
      - in: path
        name: repositoryPublicId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRepositoryPathResponseDTO'
          description: default response
      tags:
      - Repositories
  /api/v2/roleMemberships/{ownerType}:
    get:
      operationId: getRoleMembershipsGlobalOrRepositoryContainer
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: global|repository_container
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleMemberMappingListDTO'
          description: default response
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/role/{roleId}/{memberType}/{memberName}:
    delete:
      operationId: revokeRoleMembershipGlobalOrRepositoryContainer
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: global|repository_container
          type: string
      - in: path
        name: roleId
        required: true
        schema:
          type: string
      - in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Role Memberships
    put:
      operationId: grantRoleMembershipGlobalOrRepositoryContainer
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: global|repository_container
          type: string
      - in: path
        name: roleId
        required: true
        schema:
          type: string
      - in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/{internalOwnerId}:
    get:
      operationId: getRoleMembershipsApplicationOrOrganization
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleMemberMappingListDTO'
          description: default response
      tags:
      - Role Memberships
  /api/v2/roleMemberships/{ownerType}/{internalOwnerId}/role/{roleId}/{memberType}/{memberName}:
    delete:
      operationId: revokeRoleMembershipApplicationOrOrganization
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: roleId
        required: true
        schema:
          type: string
      - in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Role Memberships
    put:
      operationId: grantRoleMembershipApplicationOrOrganization
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      - in: path
        name: roleId
        required: true
        schema:
          type: string
      - in: path
        name: memberType
        required: true
        schema:
          enum:
          - USER
          - GROUP
          pattern: user|group
          type: string
      - in: path
        name: memberName
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Role Memberships
  /api/v2/roles:
    get:
      operationId: getRoles
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiRoleListDTO'
          description: default response
      tags:
      - Roles
  /api/v2/sbom/applications/{applicationId}:
    get:
      description: Gets a paginated list of SBOMs for an application
      operationId: getSbomMetadataSummaryForApplication
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: Sort results by import date. Allowed values [asc|desc]. default
          = asc
        in: query
        name: sortByDate
        schema:
          default: asc
          type: string
      - description: Number of items to return by page. default = 10
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Current page number. default = 1
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json: {}
          description: list of the sboms
      summary: Gets a paginated list of SBOMs for an application
      tags:
      - sbom
  /api/v2/sbom/applications/{applicationId}/status/{importRequestId}:
    get:
      description: Gets status of a sbom import.
      operationId: getImportStatus
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The id of the import request
        in: path
        name: importRequestId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json: {}
          description: Sbom import completed successfully.
        '404':
          description: Sbom import still in progress.
      summary: Get sbom import status
      tags:
      - sbom
  /api/v2/sbom/applications/{applicationId}/versions:
    get:
      description: Gets a list of active sbom versions by application id
      operationId: getActiveSbomVersionListByApplication
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json: {}
          description: list of the active sbom versions by application id
      summary: Gets a list of active sbom versions by application id
      tags:
      - sbom
  /api/v2/sbom/applications/{applicationId}/versions/{version}:
    delete:
      description: Deletes a specific sbom version including it's original contents
        and updates
      operationId: deleteSbomVersion
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom to be deleted
        in: path
        name: version
        required: true
        schema:
          type: string
      responses:
        '204':
          description: Delete successful
        '404':
          description: Supplied sbom version not found
      summary: Delete sbom version
      tags:
      - sbom
    get:
      description: Downloads a specific sbom version in its original or current form
      operationId: getSbomVersion
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The state of the sbom version. Allowed values [original|current].
          default = current
        in: query
        name: state
        schema:
          default: current
          type: string
      - description: Target specification of the sbom. Allowed values [cyclonedx1.6|cyclonedx1.5|spdx2.3].
          default = cyclonedx1.6
        in: query
        name: specification
        schema:
          default: cyclonedx1.6
          type: string
      - description: Output format(json/xml) of the sbom. Changing the output format
          only applicable when downloading the current form of the SBOM. The original
          sbom will always return in the original form that it was ingested. When
          requesting `current` form and if this header value is not present the sbom
          will be returned in its original ingested format. Allowed values {'application/json'|'application/xml'}.
          default = null
        in: header
        name: Accept
        schema:
          type: string
      responses:
        '200':
          content:
            application/json|application/xml: {}
          description: Content of the sbom
        '404':
          description: Supplied sbom version not found
      summary: Gets a sbom version
      tags:
      - sbom
  /api/v2/sbom/applications/{applicationId}/versions/{version}/components:
    get:
      description: Lists the components in a specific sbom version with data about
        vulnerabilities and licenses
      operationId: getSbomComponents
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: URL Encoded version value of the sbom to query its components
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: If provided, filter components by the given threat level on their
          vulnerabilities
        in: query
        name: vulnerabilityThreatLevels
        schema:
          items:
            enum:
            - NONE
            - LOW
            - MEDIUM
            - HIGH
            - CRITICAL
            type: string
          type: array
          uniqueItems: true
      - description: If provided, filter components by the given dependency types
        in: query
        name: dependencyTypes
        schema:
          items:
            enum:
            - DIRECT
            - TRANSITIVE
            - UNSPECIFIED
            type: string
          type: array
          uniqueItems: true
      - description: If provided, filter components by the component name
        in: query
        name: componentName
        schema:
          type: string
      - description: Criteria to sort the results. default = VULNERABILITIES
        in: query
        name: sortBy
        schema:
          default: VULNERABILITIES
          enum:
          - TYPE
          - PERCENTAGE_ANNOTATED
          - VULNERABILITIES
          type: string
      - description: Order mode ASC=true or DESC=false. default = false
        in: query
        name: asc
        schema:
          default: false
          type: boolean
      - description: Current page number. default = 1
        in: query
        name: page
        schema:
          default: 1
          format: int32
          type: integer
      - description: Number of items to return by page. default = 50
        in: query
        name: pageSize
        schema:
          default: 50
          format: int32
          type: integer
      responses:
        '200':
          content:
            application/json: {}
          description: List of components in the sbom
      summary: Gets the components found in a specific sbom version
      tags:
      - sbom
  /api/v2/sbom/applications/{applicationId}/versions/{version}/vulnerability/{refId}/analysis:
    delete:
      description: Deletes a Vulnerability analysis for a given component.
      operationId: deleteVulnerabilityAnalysis
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The version for a specific SBOM where the vulnerability is present
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The vulnerability id of a vulnerability
        in: path
        name: refId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/componentLocator'
        description: Hash or packageUrl to identify the component
        required: true
      responses:
        '204':
          description: Vulnerability analysis deleted
        '404':
          description: Vulnerability analysis not found
      summary: Deletes a Vulnerability analysis for a given component.
      tags:
      - sbom
    put:
      description: Updates a vulnerability analysis annotation for a specific SBOM
        vulnerability
      operationId: saveVulnerabilityAnalysis
      parameters:
      - description: The internal id of the application
        in: path
        name: applicationId
        required: true
        schema:
          type: string
      - description: The version for a specific SBOM where the vulnerability is present
        in: path
        name: version
        required: true
        schema:
          type: string
      - description: The vulnerability id of a vulnerability
        in: path
        name: refId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SBOMVulnerabilityAnalysisRequest'
        description: Vulnerability analysis details with component information
        required: true
      responses:
        '200':
          content:
            application/json: {}
          description: Vulnerability analysis annotation updated successfully
        '404':
          description: Target vulnerability not found
      summary: Updates a vulnerability analysis annotation for a specific SBOM vulnerability
      tags:
      - sbom
  /api/v2/sbom/import:
    post:
      description: Imports a new sbom version to an existing application
      operationId: importSbom
      requestBody:
        content:
          '*/*':
            schema:
              properties:
                applicationId:
                  description: The internal id of the application
                  type: string
                file:
                  type: object
              required:
              - applicationId
              type: object
      responses:
        '202':
          content:
            application/json: {}
          description: Import successful. URL to check the status of the import returned
        '400':
          description: Invalid/Unsupported data provided for sbom import
      summary: Import a new sbom version
      tags:
      - sbom
  /api/v2/scan/applications/ideUser/overview:
    get:
      operationId: getIdeUsersOverview
      parameters:
      - in: query
        name: sinceUtcTimestamp
        schema:
          format: int64
          type: integer
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdeUsersOverviewDTO'
          description: default response
      tags:
      - Scan
  /api/v2/scan/applications/{applicationId}/sources/{source}:
    post:
      operationId: scanComponents
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: source
        required: true
        schema:
          type: string
      - in: query
        name: stageId
        schema:
          default: build
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          application/xml:
            schema:
              type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanTicketDTO'
          description: default response
      tags:
      - Scan
  /api/v2/scan/applications/{applicationId}/status/{scanRequestId}:
    get:
      operationId: getScanStatus
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: scanRequestId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiThirdPartyScanResultDTO'
          description: default response
      tags:
      - Scan
  /api/v2/search/advanced:
    get:
      description: 'Use this method to perform an Advanced Search. '
      operationId: searchIndex
      parameters:
      - description: Enter your search query here
        in: query
        name: query
        schema:
          type: string
      - description: Enter the no. of results that should be visible per page
        in: query
        name: pageSize
        schema:
          default: 10
          format: int32
          type: integer
      - description: Enter the page no. for the page containing results
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: Set to `true` to retrieve results that include components with
          no violations
        in: query
        name: allComponents
        schema:
          default: false
          type: boolean
      - in: query
        name: mode
        schema:
          enum:
          - sbomManager
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResultDTO'
          description: "Response JSON containing the search query sent in the API\
            \ call, and other response fields as follows: \n1. searchQuery: search\
            \ query sent in the request \n2. page: page number of search results requested\
            \ \n3. pageSize: requested number of results per page \n4. totalNumberOfHits:\
            \ total number of results returned \n5. isExactTotalNumberOfHits \n  \
            \  * `true` indicates that the search results in the JSON is the same\
            \ no. of search results that logically      match the search query. \n\
            \    * `false` indicates that the search results in the JSON are lower\
            \ bound because fetching all results is     too expensive to compute.\
            \ \n6. groupingByDTOS: array of search results grouped on a field name\
            \ \n7. groupIdentifier: field name that the search results have been grouped\
            \ by \n8. groupBy: field value that the search results have been grouped\
            \ by \n9. additionalInfo: shared information between groups, e.g. info\
            \ if grouped by a security vulnerability \n10. searchResultItemDTOS: array\
            \ of search results with each element containing an itemType, field names\
            \ and values \n11. resultIndex: indicating the relevance of the search\
            \ result w.r.t. the query"
        '409':
          description: Search index does not exist or is unreadable.
      tags:
      - Advanced Search
  /api/v2/search/advanced/export/csv:
    get:
      description: Use this method to generate a csv file containing your search results.
        The default delimiter in the generated file is comma. Use the advancedSearchCSVExportDelimiter
        property of the Configuration REST API to change the delimiter in the generated
        file.
      operationId: getExportResults
      parameters:
      - description: A well-formed search query.
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: Enter the no. of results that should be visible per page, unset
          gives all results
        in: query
        name: pageSize
        schema:
          format: int32
          type: integer
      - description: Enter the page no. for the page containing results
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: Set to `true` to retrieve results that include components with
          no violations.
        in: query
        name: allComponents
        schema:
          default: false
          type: boolean
      - in: query
        name: mode
        schema:
          enum:
          - sbomManager
          type: string
      responses:
        '200':
          description: Downloadable csv file generated successfully.
        '409':
          description: Search index does not exist or is unreadable.
      tags:
      - Advanced Search
  /api/v2/search/advanced/index:
    post:
      description: 'Use this method to create or rebuild the index for Advanced Search.
        This is a resource intensive operation. Avoid creating indexes during peak
        usage hours.


        Permissions required: System Administrator'
      operationId: createSearchIndexAsync
      responses:
        '200':
          description: Index created successfully.
      tags:
      - Advanced Search
  /api/v2/search/component:
    get:
      operationId: searchComponent
      parameters:
      - in: query
        name: stageId
        schema:
          type: string
      - in: query
        name: hash
        schema:
          type: string
      - in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - in: query
        name: packageUrl
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSearchResultsDTOV2'
          description: default response
      tags:
      - Search
  /api/v2/securityOverrides:
    get:
      operationId: getSecurityVulnerabilityOverrides
      parameters:
      - in: query
        name: refId
        schema:
          type: string
      - in: query
        name: componentPurl
        schema:
          type: string
      - in: query
        name: ownerId
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSecurityVulnerabilityOverrideResponseDTOV2'
          description: default response
      tags:
      - Security Overrides
  /api/v2/solutions/licensed:
    get:
      operationId: getLicensedSolutions
      parameters:
      - in: query
        name: allowRelativeUrls
        schema:
          default: false
          type: boolean
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiLicensedSolutionDTO'
                type: array
          description: default response
      tags:
      - Solutions
  /api/v2/sourceControl/automaticRoleAssignment/{publicId}:
    post:
      operationId: automaticRoleAssignment
      parameters:
      - in: path
        name: publicId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: default response
      tags:
      - Source Control
  /api/v2/sourceControl/{ownerType}/{internalOwnerId}:
    delete:
      operationId: deleteSourceControl
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Source Control
    get:
      operationId: getSourceControl_1
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: default response
      tags:
      - Source Control
    post:
      operationId: addSourceControl
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: default response
      tags:
      - Source Control
    put:
      operationId: updateSourceControl
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSourceControlDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiSourceControlDTO'
          description: default response
      tags:
      - Source Control
  /api/v2/sourceControlMetrics/{ownerType}/{internalOwnerId}:
    get:
      operationId: getSourceControl
      parameters:
      - in: path
        name: ownerType
        required: true
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          pattern: application|organization
          type: string
      - in: path
        name: internalOwnerId
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiPullRequestResults'
          description: default response
      tags:
      - Source Control Metrics
  /api/v2/spdx/{applicationId}/reports/{scanId}:
    get:
      operationId: getByScanId
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: scanId
        required: true
        schema:
          type: string
      - in: query
        name: format
        schema:
          default: json
          type: string
      - in: query
        name: generateCycloneDx
        schema:
          default: false
          type: boolean
      - in: query
        name: spdxVersion
        schema:
          default: '2.3'
          type: string
      responses:
        default:
          content:
            application/json: {}
            application/octet-stream: {}
            application/xml: {}
          description: default response
      tags:
      - Spdx
  /api/v2/spdx/{applicationId}/stages/{stageId}:
    get:
      operationId: getLatestForStage
      parameters:
      - in: path
        name: applicationId
        required: true
        schema:
          type: string
      - in: path
        name: stageId
        required: true
        schema:
          type: string
      - in: query
        name: format
        schema:
          default: json
          type: string
      - in: query
        name: generateCycloneDx
        schema:
          default: false
          type: boolean
      - in: query
        name: spdxVersion
        schema:
          default: '2.3'
          type: string
      responses:
        default:
          content:
            application/json: {}
            application/octet-stream: {}
            application/xml: {}
          description: default response
      tags:
      - Spdx
  /api/v2/telemetry:
    post:
      operationId: postExternalTelemetry
      parameters:
      - in: header
        name: user-agent
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: object
              type: object
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Telemetry
  /api/v2/userTokens:
    get:
      operationId: getUserTokensByCreatedBetweenAndRealmId
      parameters:
      - in: query
        name: createdAfter
        schema:
          type: string
      - in: query
        name: createdBefore
        schema:
          type: string
      - in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiUserTokenDTO'
                type: array
          description: default response
      tags:
      - User Tokens
  /api/v2/userTokens/currentUser:
    delete:
      operationId: deleteCurrentUserToken
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - User Tokens
    post:
      operationId: createUserToken
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenDTO'
          description: default response
      tags:
      - User Tokens
  /api/v2/userTokens/currentUser/hasToken:
    get:
      operationId: getUserTokenExistsForCurrentUser
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenExistsDTO'
          description: default response
      tags:
      - User Tokens
  /api/v2/userTokens/purge:
    delete:
      operationId: purgeUserTokens
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - User Tokens
  /api/v2/userTokens/userCode/{userCode}:
    delete:
      operationId: deleteUserTokenByUserCode
      parameters:
      - in: path
        name: userCode
        required: true
        schema:
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - User Tokens
  /api/v2/userTokens/{username}:
    get:
      operationId: getUserTokenByUsernameAndRealmId
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserTokenDTO'
          description: default response
      tags:
      - User Tokens
  /api/v2/users:
    get:
      operationId: getAll_2
      parameters:
      - in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserListDTO'
          description: default response
      tags:
      - Users
    post:
      operationId: add
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUserDTO'
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Users
  /api/v2/users/{username}:
    delete:
      operationId: delete_1
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        default:
          content:
            '*/*': {}
          description: default response
      tags:
      - Users
    get:
      operationId: get_1
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      - in: query
        name: realm
        schema:
          default: Internal
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserDTO'
          description: default response
      tags:
      - Users
    put:
      operationId: update
      parameters:
      - in: path
        name: username
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUserDTO'
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUserDTO'
          description: default response
      tags:
      - Users
  /api/v2/vulnerabilities/{refId}:
    get:
      operationId: getSecurityVulnerabilityDetails
      parameters:
      - in: path
        name: refId
        required: true
        schema:
          type: string
      - in: query
        name: componentIdentifier
        schema:
          $ref: '#/components/schemas/ComponentIdentifier'
      - in: query
        name: identificationSource
        schema:
          type: string
      - in: query
        name: scanId
        schema:
          type: string
      - in: query
        name: ownerType
        schema:
          enum:
          - application
          - organization
          - repository_container
          - repository_manager
          - repository
          - global
          type: string
      - in: query
        name: ownerId
        schema:
          type: string
      responses:
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecurityVulnerabilityData'
          description: default response
      tags:
      - Vulnerabilities
security:
- BasicAuth: []
tags:
- description: Use the Advanced Search REST API to perform searches on Lifecycle application
    scan reports.
  name: Advanced Search
- description: 'Use the Application Categories REST API to manage the application
    categories or tags assigned to the applications in an organization. '
  name: Application Categories
- description: Use this REST API to retrieve a component's security vulnerability
    data, license data, age and popularity.
  name: Components
- description: Use the CycloneDX REST API to generate CycloneDX SBOMs in XML or JSON
    formats, containing coordinates and licenses for components found in a scan report.
  name: CycloneDX
- description: Set policies for automatic purging of obsolete application and Success
    Metrics reports. <p>Note that IQ Server has a preset limit of purging 5000 reports
    in one execution of its report purging job.
  name: Data Retention Policies
- description: "Use this REST API to perform an application policy evaluation. Policy\
    \ evaluations are executed asynchronously.<p>This is a 2-step process that involves:\
    \ \n1. Requesting a policy evaluation (POST) \n2. Checking the status and response\
    \ of the evaluation request (GET)"
  name: Policy Evaluation
- description: 'Use this REST API to obtain the violation details, violation details
    across stages (cross stage), violations occurring due to transitive dependencies
    and all waivers applicable to a violation.


    Cross-stage policy violations are helpful in performance analysis like MTTR metrics.'
  name: Policy Violation Details
- description: Use this rest API to manage and fetch available waiver reasons
  name: Policy Waiver Reasons
- description: Use this REST API to create and retrieve policy waivers.
  name: Policy Waivers
- description: Use this REST API to retrieve the data from an application composition
    report, that is generated after an evaluation.
  name: Application Report Data
- description: 'Use this REST API to view application scan reports, generate a list
    of stale waivers, view existing policy waivers on components, view quarantined
    components and retrieve additional metrics data. '
  name: Reports
- name: Applications
- name: Audit Logs
- name: Claim
- name: Composite Source Control
- name: Composite Source Control Config Validator
- name: Config
- name: Config Artifactory Connection
- name: Config Crowd
- name: Config JIRA
- name: Config Mail
- name: Config Proxy Server
- name: Config Reverse Proxy Authentication
- name: Config SAML
- name: Config Source Control
- name: Endpoints
- name: Firewall
- name: Labels
- name: License Legal Metadata
- name: Organizations
- name: Policies
- name: Product
- name: Repositories
- name: Role Memberships
- name: Roles
- name: Scan
- name: Search
- name: Security Overrides
- name: Solutions
- name: Source Control
- name: Source Control Metrics
- name: Spdx
- name: Telemetry
- name: User Tokens
- name: Users
- name: Vulnerabilities
- name: sbom
